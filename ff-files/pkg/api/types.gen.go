// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	TVMAuthScopes = "TVMAuth.Scopes"
)

// CreatedObject defines model for CreatedObject.
type CreatedObject struct {
	// Link URL для доступа к файлу
	Link string `json:"link"`

	// ObjectId Уникальный идентификатор загруженного файла
	ObjectId openapi_types.UUID `json:"object_id"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code HTTP статус код
	Code *int `json:"code,omitempty"`

	// Details Дополнительная информация об ошибке
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Описание ошибки
	Error string `json:"error"`
}

// FileDeleteResponse defines model for FileDeleteResponse.
type FileDeleteResponse struct {
	// Message Сообщение о результате операции
	Message string `json:"message"`

	// Status HTTP статус код
	Status int `json:"status"`
}

// FileGetResponse defines model for FileGetResponse.
type FileGetResponse struct {
	// Data URL для доступа к файлу
	Data string `json:"data"`

	// Message Сообщение о результате операции
	Message string `json:"message"`

	// Status HTTP статус код
	Status int `json:"status"`
}

// FileIDsRequest defines model for FileIDsRequest.
type FileIDsRequest struct {
	// FileIDs Массив идентификаторов файлов
	FileIDs []openapi_types.UUID `json:"fileIDs"`
}

// FileMetadata defines model for FileMetadata.
type FileMetadata struct {
	// ContentType MIME тип файла
	ContentType string `json:"content_type"`

	// FileId Идентификатор файла
	FileId openapi_types.UUID `json:"file_id"`

	// Filename Оригинальное имя файла
	Filename string `json:"filename"`

	// Metadata Дополнительные метаданные файла
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// OwnerId Идентификатор владельца файла
	OwnerId string `json:"owner_id"`

	// Size Размер файла в байтах
	Size int64 `json:"size"`

	// UploadDate Дата и время загрузки файла
	UploadDate time.Time `json:"upload_date"`
}

// FileMetadataResponse defines model for FileMetadataResponse.
type FileMetadataResponse struct {
	Data FileMetadata `json:"data"`

	// Message Сообщение о результате операции
	Message string `json:"message"`

	// Status HTTP статус код
	Status int `json:"status"`
}

// FileUploadResponse defines model for FileUploadResponse.
type FileUploadResponse struct {
	Data CreatedObject `json:"data"`

	// Message Сообщение о результате операции
	Message string `json:"message"`

	// Status HTTP статус код
	Status int `json:"status"`
}

// FilesDeleteResponse defines model for FilesDeleteResponse.
type FilesDeleteResponse struct {
	// Message Сообщение о результате операции
	Message string `json:"message"`

	// Status HTTP статус код
	Status int `json:"status"`
}

// FilesGetResponse defines model for FilesGetResponse.
type FilesGetResponse struct {
	// Data Массив URL для доступа к файлам
	Data []string `json:"data"`

	// Message Сообщение о результате операции
	Message string `json:"message"`

	// Status HTTP статус код
	Status int `json:"status"`
}

// FilesUploadResponse defines model for FilesUploadResponse.
type FilesUploadResponse struct {
	// Data Массив созданных объектов
	Data []CreatedObject `json:"data"`

	// Message Сообщение о результате операции
	Message string `json:"message"`

	// Status HTTP статус код
	Status int `json:"status"`
}

// TemporaryUrlResponse defines model for TemporaryUrlResponse.
type TemporaryUrlResponse struct {
	Data TemporaryUrlResponseData `json:"data"`

	// Message Сообщение о результате операции
	Message string `json:"message"`

	// Status HTTP статус код
	Status int `json:"status"`
}

// TemporaryUrlResponseData defines model for TemporaryUrlResponseData.
type TemporaryUrlResponseData struct {
	// ExpiresAt Время истечения ссылки
	ExpiresAt time.Time `json:"expires_at"`

	// Url Временная ссылка для доступа к файлу
	Url string `json:"url"`
}

// UploadFileMultipartBody defines parameters for UploadFile.
type UploadFileMultipartBody struct {
	// File Файл для загрузки
	File openapi_types.File `json:"file"`

	// Metadata Метаданные файла в формате JSON (опционально)
	Metadata *string `json:"metadata,omitempty"`
}

// UploadFilesMultipartBody defines parameters for UploadFiles.
type UploadFilesMultipartBody struct {
	// Files Массив файлов для загрузки
	Files []openapi_types.File `json:"files"`
}

// GenerateTemporaryUrlParams defines parameters for GenerateTemporaryUrl.
type GenerateTemporaryUrlParams struct {
	// ExpiresIn Время жизни ссылки в секундах (по умолчанию 1 час)
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty"`
}

// UploadFileMultipartRequestBody defines body for UploadFile for multipart/form-data ContentType.
type UploadFileMultipartRequestBody UploadFileMultipartBody

// DeleteFilesJSONRequestBody defines body for DeleteFiles for application/json ContentType.
type DeleteFilesJSONRequestBody = FileIDsRequest

// GetFilesJSONRequestBody defines body for GetFiles for application/json ContentType.
type GetFilesJSONRequestBody = FileIDsRequest

// UploadFilesMultipartRequestBody defines body for UploadFiles for multipart/form-data ContentType.
type UploadFilesMultipartRequestBody UploadFilesMultipartBody
