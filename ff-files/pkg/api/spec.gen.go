// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
