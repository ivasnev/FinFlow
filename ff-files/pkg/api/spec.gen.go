// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
