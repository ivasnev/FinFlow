// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Загрузка одного файла
	// (POST /api/v1/files)
	UploadFile(c *gin.Context)
	// Удаление нескольких файлов
	// (DELETE /api/v1/files/many)
	DeleteFiles(c *gin.Context)
	// Получение нескольких файлов
	// (GET /api/v1/files/many)
	GetFiles(c *gin.Context)
	// Загрузка нескольких файлов
	// (POST /api/v1/files/many)
	UploadFiles(c *gin.Context)
	// Удаление файла
	// (DELETE /api/v1/files/{file_id})
	DeleteFile(c *gin.Context, fileId openapi_types.UUID)
	// Получение файла
	// (GET /api/v1/files/{file_id})
	GetFile(c *gin.Context, fileId openapi_types.UUID)
	// Получение метаданных файла
	// (GET /api/v1/files/{file_id}/metadata)
	GetFileMetadata(c *gin.Context, fileId openapi_types.UUID)
	// Генерация временной ссылки
	// (POST /api/v1/files/{file_id}/temporary-url)
	GenerateTemporaryUrl(c *gin.Context, fileId openapi_types.UUID, params GenerateTemporaryUrlParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// UploadFile operation middleware
func (siw *ServerInterfaceWrapper) UploadFile(c *gin.Context) {

	c.Set(TVMAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UploadFile(c)
}

// DeleteFiles operation middleware
func (siw *ServerInterfaceWrapper) DeleteFiles(c *gin.Context) {

	c.Set(TVMAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFiles(c)
}

// GetFiles operation middleware
func (siw *ServerInterfaceWrapper) GetFiles(c *gin.Context) {

	c.Set(TVMAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFiles(c)
}

// UploadFiles operation middleware
func (siw *ServerInterfaceWrapper) UploadFiles(c *gin.Context) {

	c.Set(TVMAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UploadFiles(c)
}

// DeleteFile operation middleware
func (siw *ServerInterfaceWrapper) DeleteFile(c *gin.Context) {

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", c.Param("file_id"), &fileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter file_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(TVMAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFile(c, fileId)
}

// GetFile operation middleware
func (siw *ServerInterfaceWrapper) GetFile(c *gin.Context) {

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", c.Param("file_id"), &fileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter file_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(TVMAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFile(c, fileId)
}

// GetFileMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetFileMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", c.Param("file_id"), &fileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter file_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(TVMAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFileMetadata(c, fileId)
}

// GenerateTemporaryUrl operation middleware
func (siw *ServerInterfaceWrapper) GenerateTemporaryUrl(c *gin.Context) {

	var err error

	// ------------- Path parameter "file_id" -------------
	var fileId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "file_id", c.Param("file_id"), &fileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter file_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(TVMAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateTemporaryUrlParams

	// ------------- Optional query parameter "expires_in" -------------

	err = runtime.BindQueryParameter("form", true, false, "expires_in", c.Request.URL.Query(), &params.ExpiresIn)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter expires_in: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GenerateTemporaryUrl(c, fileId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/files", wrapper.UploadFile)
	router.DELETE(options.BaseURL+"/api/v1/files/many", wrapper.DeleteFiles)
	router.GET(options.BaseURL+"/api/v1/files/many", wrapper.GetFiles)
	router.POST(options.BaseURL+"/api/v1/files/many", wrapper.UploadFiles)
	router.DELETE(options.BaseURL+"/api/v1/files/:file_id", wrapper.DeleteFile)
	router.GET(options.BaseURL+"/api/v1/files/:file_id", wrapper.GetFile)
	router.GET(options.BaseURL+"/api/v1/files/:file_id/metadata", wrapper.GetFileMetadata)
	router.POST(options.BaseURL+"/api/v1/files/:file_id/temporary-url", wrapper.GenerateTemporaryUrl)
}
