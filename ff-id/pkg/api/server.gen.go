// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение пользователей по ID
	// (GET api/v1/internal/users)
	GetUsersByIds(c *gin.Context, params GetUsersByIdsParams)
	// Регистрация пользователя от сервиса
	// (POST api/v1/internal/users/register)
	RegisterUserFromService(c *gin.Context)
	// Обновление профиля текущего пользователя
	// (PATCH api/v1/users/me)
	UpdateUser(c *gin.Context)
	// Получение заявок в друзья
	// (GET api/v1/users/me/friend-requests)
	GetFriendRequests(c *gin.Context, params GetFriendRequestsParams)
	// Отправка заявки в друзья
	// (POST api/v1/users/me/friends)
	AddFriend(c *gin.Context)
	// Действие с заявкой в друзья
	// (POST api/v1/users/me/friends/action)
	FriendAction(c *gin.Context)
	// Удаление из друзей
	// (DELETE api/v1/users/me/friends/{friend_id})
	RemoveFriend(c *gin.Context, friendId int64)
	// Регистрация нового пользователя
	// (POST api/v1/users/register)
	RegisterUser(c *gin.Context)
	// Получение информации о пользователе
	// (GET api/v1/users/{nickname})
	GetUserByNickname(c *gin.Context, nickname string)
	// Получение списка друзей
	// (GET api/v1/users/{nickname}/friends)
	GetFriends(c *gin.Context, nickname string, params GetFriendsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetUsersByIds operation middleware
func (siw *ServerInterfaceWrapper) GetUsersByIds(c *gin.Context) {

	var err error

	c.Set(TVMAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersByIdsParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := c.Query("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument user_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersByIds(c, params)
}

// RegisterUserFromService operation middleware
func (siw *ServerInterfaceWrapper) RegisterUserFromService(c *gin.Context) {

	c.Set(TVMAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUserFromService(c)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c)
}

// GetFriendRequests operation middleware
func (siw *ServerInterfaceWrapper) GetFriendRequests(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFriendRequestsParams

	// ------------- Optional query parameter "incoming" -------------

	err = runtime.BindQueryParameter("form", true, false, "incoming", c.Request.URL.Query(), &params.Incoming)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter incoming: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFriendRequests(c, params)
}

// AddFriend operation middleware
func (siw *ServerInterfaceWrapper) AddFriend(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddFriend(c)
}

// FriendAction operation middleware
func (siw *ServerInterfaceWrapper) FriendAction(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FriendAction(c)
}

// RemoveFriend operation middleware
func (siw *ServerInterfaceWrapper) RemoveFriend(c *gin.Context) {

	var err error

	// ------------- Path parameter "friend_id" -------------
	var friendId int64

	err = runtime.BindStyledParameterWithOptions("simple", "friend_id", c.Param("friend_id"), &friendId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter friend_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveFriend(c, friendId)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// GetUserByNickname operation middleware
func (siw *ServerInterfaceWrapper) GetUserByNickname(c *gin.Context) {

	var err error

	// ------------- Path parameter "nickname" -------------
	var nickname string

	err = runtime.BindStyledParameterWithOptions("simple", "nickname", c.Param("nickname"), &nickname, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nickname: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserByNickname(c, nickname)
}

// GetFriends operation middleware
func (siw *ServerInterfaceWrapper) GetFriends(c *gin.Context) {

	var err error

	// ------------- Path parameter "nickname" -------------
	var nickname string

	err = runtime.BindStyledParameterWithOptions("simple", "nickname", c.Param("nickname"), &nickname, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nickname: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFriendsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "friend_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "friend_name", c.Request.URL.Query(), &params.FriendName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter friend_name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFriends(c, nickname, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"api/v1/internal/users", wrapper.GetUsersByIds)
	router.POST(options.BaseURL+"api/v1/internal/users/register", wrapper.RegisterUserFromService)
	router.PATCH(options.BaseURL+"api/v1/users/me", wrapper.UpdateUser)
	router.GET(options.BaseURL+"api/v1/users/me/friend-requests", wrapper.GetFriendRequests)
	router.POST(options.BaseURL+"api/v1/users/me/friends", wrapper.AddFriend)
	router.POST(options.BaseURL+"api/v1/users/me/friends/action", wrapper.FriendAction)
	router.DELETE(options.BaseURL+"api/v1/users/me/friends/:friend_id", wrapper.RemoveFriend)
	router.POST(options.BaseURL+"api/v1/users/register", wrapper.RegisterUser)
	router.GET(options.BaseURL+"api/v1/users/:nickname", wrapper.GetUserByNickname)
	router.GET(options.BaseURL+"api/v1/users/:nickname/friends", wrapper.GetFriends)
}
