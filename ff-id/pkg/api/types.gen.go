// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
	TVMAuthScopes    = "TVMAuth.Scopes"
)

// Defines values for FriendActionRequestAction.
const (
	Accept FriendActionRequestAction = "accept"
	Block  FriendActionRequestAction = "block"
	Reject FriendActionRequestAction = "reject"
)

// Defines values for FriendDTOStatus.
const (
	FriendDTOStatusAccepted FriendDTOStatus = "accepted"
	FriendDTOStatusBlocked  FriendDTOStatus = "blocked"
	FriendDTOStatusPending  FriendDTOStatus = "pending"
	FriendDTOStatusRejected FriendDTOStatus = "rejected"
)

// Defines values for GetFriendsParamsStatus.
const (
	GetFriendsParamsStatusAccepted GetFriendsParamsStatus = "accepted"
	GetFriendsParamsStatusBlocked  GetFriendsParamsStatus = "blocked"
	GetFriendsParamsStatusPending  GetFriendsParamsStatus = "pending"
	GetFriendsParamsStatusRejected GetFriendsParamsStatus = "rejected"
)

// AddFriendRequest defines model for AddFriendRequest.
type AddFriendRequest struct {
	// FriendNickname Никнейм пользователя для добавления в друзья
	FriendNickname string `json:"friend_nickname"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Описание ошибки
	Error string `json:"error"`
}

// FriendActionRequest defines model for FriendActionRequest.
type FriendActionRequest struct {
	// Action Действие с заявкой в друзья
	Action FriendActionRequestAction `json:"action"`

	// UserId ID пользователя для действия
	UserId int64 `json:"user_id"`
}

// FriendActionRequestAction Действие с заявкой в друзья
type FriendActionRequestAction string

// FriendDTO defines model for FriendDTO.
type FriendDTO struct {
	// Name Имя пользователя
	Name string `json:"name"`

	// PhotoId ID фотографии пользователя
	PhotoId *openapi_types.UUID `json:"photo_id,omitempty"`

	// Status Статус дружбы
	Status *FriendDTOStatus `json:"status,omitempty"`

	// UserId ID пользователя
	UserId int64 `json:"user_id"`
}

// FriendDTOStatus Статус дружбы
type FriendDTOStatus string

// FriendsListResponse defines model for FriendsListResponse.
type FriendsListResponse struct {
	// Objects Список друзей
	Objects []FriendDTO `json:"objects"`

	// Page Текущая страница
	Page int `json:"page"`

	// PageSize Размер страницы
	PageSize int `json:"page_size"`

	// Total Общее количество записей
	Total int64 `json:"total"`
}

// RegisterUserRequest defines model for RegisterUserRequest.
type RegisterUserRequest struct {
	// AvatarId ID аватара пользователя
	AvatarId *openapi_types.UUID `json:"avatar_id,omitempty"`

	// Birthdate Дата рождения (Unix timestamp)
	Birthdate *int64 `json:"birthdate,omitempty"`

	// Email Email пользователя
	Email openapi_types.Email `json:"email"`

	// Name Полное имя пользователя
	Name *string `json:"name,omitempty"`

	// Nickname Никнейм пользователя
	Nickname string `json:"nickname"`

	// Phone Номер телефона
	Phone *string `json:"phone,omitempty"`
}

// ServiceRegisterUserRequest defines model for ServiceRegisterUserRequest.
type ServiceRegisterUserRequest struct {
	// Email Email пользователя
	Email openapi_types.Email `json:"email"`

	// Name Полное имя пользователя
	Name *string `json:"name,omitempty"`

	// Nickname Никнейм пользователя
	Nickname string `json:"nickname"`

	// UserId ID пользователя из другого сервиса
	UserId int64 `json:"user_id"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	// Birthdate Новая дата рождения (Unix timestamp)
	Birthdate *int64 `json:"birthdate,omitempty"`

	// Email Новый email пользователя
	Email *openapi_types.Email `json:"email,omitempty"`

	// Name Новое имя пользователя
	Name *string `json:"name,omitempty"`

	// Nickname Новый никнейм пользователя
	Nickname *string `json:"nickname,omitempty"`

	// Phone Новый номер телефона
	Phone *string `json:"phone,omitempty"`
}

// UserDTO defines model for UserDTO.
type UserDTO struct {
	// AvatarId ID аватара пользователя
	AvatarId *openapi_types.UUID `json:"avatar_id,omitempty"`

	// Birthdate Дата рождения в формате Unix timestamp
	Birthdate *int64 `json:"birthdate,omitempty"`

	// CreatedAt Дата создания аккаунта (Unix timestamp)
	CreatedAt int64 `json:"created_at"`

	// Email Email пользователя
	Email openapi_types.Email `json:"email"`

	// Id Уникальный идентификатор пользователя
	Id int64 `json:"id"`

	// Name Полное имя пользователя
	Name *string `json:"name,omitempty"`

	// Nickname Никнейм пользователя
	Nickname string `json:"nickname"`

	// Phone Номер телефона пользователя
	Phone *string `json:"phone,omitempty"`

	// UpdatedAt Дата последнего обновления (Unix timestamp)
	UpdatedAt int64 `json:"updated_at"`
}

// GetUsersByIdsParams defines parameters for GetUsersByIds.
type GetUsersByIdsParams struct {
	// UserId ID пользователей (можно передать несколько)
	UserId []int64 `form:"user_id" json:"user_id"`
}

// GetFriendRequestsParams defines parameters for GetFriendRequests.
type GetFriendRequestsParams struct {
	// Incoming Тип заявок (true - входящие, false - исходящие)
	Incoming *bool `form:"incoming,omitempty" json:"incoming,omitempty"`

	// Page Номер страницы (по умолчанию 1)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Количество записей на странице (по умолчанию 20, максимум 100)
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetFriendsParams defines parameters for GetFriends.
type GetFriendsParams struct {
	// Page Номер страницы (по умолчанию 1)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Количество записей на странице (по умолчанию 20, максимум 100)
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// FriendName Фильтр по имени друга (ILIKE поиск)
	FriendName *string `form:"friend_name,omitempty" json:"friend_name,omitempty"`

	// Status Фильтр по статусу дружбы
	Status *GetFriendsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetFriendsParamsStatus defines parameters for GetFriends.
type GetFriendsParamsStatus string

// RegisterUserFromServiceJSONRequestBody defines body for RegisterUserFromService for application/json ContentType.
type RegisterUserFromServiceJSONRequestBody = ServiceRegisterUserRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// AddFriendJSONRequestBody defines body for AddFriend for application/json ContentType.
type AddFriendJSONRequestBody = AddFriendRequest

// FriendActionJSONRequestBody defines body for FriendAction for application/json ContentType.
type FriendActionJSONRequestBody = FriendActionRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterUserRequest
