// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xc/W7bRhJ/FYK9P1ycbEu27CT66xKkObhtekXrtgfEQcJIm5iNRKok5dYNDNhWv4IE",
	"8SEo0OJw/cw9gOJGsSJb8ivMvtFhZpffS5q24zTJGSgaWyK5s7Mzv5n5zdB39LrdatsWszxXr93R3foy",
	"axn04/lG45JjMqvxAfusw1wPP2s7dps5nsnoipv09TXLrN+2jBbDjxrMrTtm2zNtS6/p8BMMYAgj6MMz",
	"2NNgH8awy+/DDoxhG3p8E/qwy7c0eOL/M4bH0INt2IU+jGCAH25r8ISv8y7s8Pt8Sy/p7Auj1W4yvabj",
	"qpWZWb2ke6tt/MD1HNO6pa+tlXSHfdYxHdbQa1dSgl4NbrBvfMrqnr5W0t9yHNv5gLlt23JZeq8Mv1bs",
	"8GfYhwHfgB6KC30Nxvw7GMBjGMIgJuuCtWI0zYbmSG0eJLNYUCWpOJXzdRQh82yMupAwJfD3eBh8g2/C",
	"NgnMNzTYgR7fgm0YwhieqTRudVook1GvszaK7jASpqTfaNr12yhluNHgosT+SnrHZc41s5EWauFiEduI",
	"yB23g9mSftN2Woan13TT8uar4eKm5bFbzElp1xel5CsqW9EXF/+RVm+Gvf8Ieyhrxl5i9vC2vWxpF22m",
	"UlR72fbsLE3xr2DMN2EMf/B16PGvYACDYkvOzZXZ2Wq5PMlmzt2YrFYa1UnjTGV+slqdn5+bq1bL5XJZ",
	"j+iy0yENpcRzPcPruIrt/8Y3cWneRaMSJvQUHvN7ERNqM6uBjylJO2GNwJzoRzIo1lCZFGs8L6OKaqUy",
	"cyzzycQTYTzuu6brZaOKuFypSokrYxgG3ogeoJd002MtuuUvDrup1/Q3pkMMn5YAPh3a7lognOE4xirZ",
	"l3FLZb2/Qx+GvMvvIhxo6GtoYYTD30AvprS0hsRTr7nml6pH/wo92IE96PP1xIOFdfgPnimrnuzZntFU",
	"gu9jfhf6CLsIXbsw4N9CX4LEmHBNqlFoLpR/rnz4QyetRbfpC1YKzlFlCB+wW6brMecjlznZcL1ieEa2",
	"Hfek9fZQby/W2W+YjrfcMDymjCUklMbXYQxPCaJF0J74yDK/0DyzxVzPaLXfjEo2P1upzM2Uy0VOoKSz",
	"lmEqjv4t/LiYItBX/yZ/narbreimxdMVu87A91/IykYwRpMbPB+wP3b6FFvpU3vZamRGFUu9ytj3THoi",
	"9DHEwCju8vpfz5yrzMxW5+bPnD0X1aF47IHpjNR0bg72IXNWzDor5DF/lmG8qNM6WrI0gB0/XPyBKQKM",
	"NUQ/vk5Z00YCxY8X+god6UdtxI7ck8xDmJ/kBikB/LPARkjB78EzjRU3L4t9Tlc/L+wRqjgs8gj9N7T3",
	"8KGHtWd/11TbHNK0LfZ5WHAdEo2CVYsC09kz83PV2ZlKuRgwpa3UZY4yz3/N4jJsi/JhHfaEeFrcd47u",
	"OnWHoZ1dM7w8eTCf3UFP9uXpwRCG0ONdGNEVeb5cma+Wz51DkV7mzEFlKvBIelCP1hwJ8x6Ig+GbMKAq",
	"bkhijPl60bqlOldIEae5DEJGsSUPmeSU9I7A13y7x6X5BpFaT0gFGJeJ6xqRLLuFYtmh7D8RtdUBO+a2",
	"sb2kQznW/azecUxv9UOsMQU+XmCGw5zzHW+ZIjn9dsmX7e1PFvVSQidvf7KoEXsxxD0H7E6Pd+k84t7w",
	"TQ63IUs6qndRTrF2qIllz2vjAS1+fNkXLy7J4seXURJcqc83A0n2oA9PYznTSCZSsE0F5QD2YKygo0x8",
	"6DIzGiSF8AL9n5OLH1+eXDTrt1mEEjPa5jtsVV9DpZrWTRuFq9uWZ9S9kFzSL5nWpab9ubbIjBbuJC7+",
	"+fcXfJnjGZ7Gu7BP9XWMRs2wfthDDeN//GuN7huT+oOvtjUpx9SStWTBb+FS4nI06TEpghbkW6RN/hVC",
	"OgzpCMn/BPKJS/l9KXptyZrU4JFS3rQomXZAT/kNZaLP9vi9GGdC+/M5TiJU4gwn3f6fI517cATr5NUD",
	"n9s40HRRmW+8ocG/sgwfxVqy4Afo8bswIJpjRJGjrzGr0bZNy3M1WqwPj3mXP0AbznMjokbw6h1NeG3E",
	"D2tL1vXr15cs9BTbMb800Mhq/nVLnXJ5tm7U68x1r3n2bWbRJ0zetGTBQxjhyvT4kWTCM6VEx8uT1Bcm",
	"6js1KYS30rrm0ScJEVCXEQtA0I1YAAn5Cx3fE9LCUxjQeTzgm3xDuBChM4l4VxLjIZsZGhTxmWS21yWV",
	"eV2b1CjNGlBiQ1iCx/6EbEQsFmRgdKNPZ9KdwWP9EJW+r0d3+SQp3RUy9j2N6OAh7JKfhddLJpUuVzv/",
	"fcGQPaZbhzCgdHEbk7MlSy/pTbPOJGspEenywiLRcabXjALUwkVNVu7a+fcX9JK+whxXoFRlqjxVxnvs",
	"NrOMtqnX9Nmp8tQs8Wjessix2+b0SmUaQ5djGc1pTLvoi1tMFVQfUg65TV5211f4AEaRxBbd54GGrpuB",
	"eoR1+D2i3sJFbeJ46I9hGqsGcpuFhl7T/848rCncC6sLDZc26xgt5tHGrhSu6Am8JmjFpygIXtaXmNsT",
	"MDqCPt8Q7Ce/j//GUoYrldJMaZa49HbTbjC95jkdJmPVZx3mrIahKizsw8RBXC04ZTyKgHoukHYmSWfX",
	"WyWrwVv1tau4jKDF6YEz5bIfBZnlCbNoN806qXT6U1f0shSS5JHgflmXkmYtFU7hx5QFbeVbED61ekip",
	"84SNNyBVIv4EfTxhvk4mMOSbMh7k2g+KOfdCxUwEA75Fmgzaor0wX8H/92KpJXlHkLJduYp24nZaLcNZ",
	"DWoW3sVQ5vdbsx2HPHzhIhqncculLFhCjH4V11TizrQjyUfiAmzXUzYzorF+QABOKDSSFM0fOYZDcE0F",
	"l9hDPl2nTdww6reZ1Zj07En5YxptooTpJcduSTSWrsxc74LdWC1gAQFuBPSqqgYOi7xIhRbQlZWZ2bVS",
	"QVvK4XvX4hUMAtFaCjIqz82qA6RQ2PMvGcETEwMC5O8ENu8QDZQwDT+ivjxoIekX+Qu1yCjV3kBXfI2w",
	"4td0Rp5TBwm3THHlucghAEOwHW3Dqy+rW5R+kS9Lo6xchSQR7dd+JkMC/SkNHqKY/gVbGiWCGJL8ZBbG",
	"sJ8svPg9rKFSyBHS88cBiwgXGWENAwgRtEISRQSCJPjpCLYkCGTJ+MTZ3sJIk25DFAKY8osBmEipm4aV",
	"BE30ygBJ9TnCcyEhiY4XDCoMfLcRCnvFQC3KqqVw7eckbUhYEGVL4lCSl4xEEE5UXSp4mxbjc5MSHg5Z",
	"mpExB5Ms2/xrKnG3iNT4GsFwV7BPG8lvcggbGlrbj5XzcnRtH3oI+oh7gkxQVWaxscYDqzP4HQawH5dn",
	"AuECC+vYfqBf0m4aTZe+SewI+m/q6rrLtOp2S4xEhQbYYDeNTtPzK7AAa8Wvspi5YdtNZlhoP3lEeGLc",
	"RpugxJh3qa7c5d/Krx5olSwR5eSLQrxKfCioZVpmq9NSDggphPz3gUM7GlH3iVGkfvYWZsolLOJ7MOQb",
	"1NTowp5WKZfzduYP8yi2N1NOzCa1jC/kBjHC5W736glGE9VwmQqJYlNkMYfaj1ZSiZjzEoWYfdFaJVPe",
	"5Ov83mmgeWGBRlFs52ByJJSIeJEbTNyc8vpnvhk2BPykOSA8eTcdDbrUWt0R6QgCH16kDnkPUgEhmHM/",
	"TgacGoUPZtMLp6ipefsTKIHjww0t5rpyEjTsgMap5ZSmE7lp9KgE91xk4EJhyj8cc9XTrPjwYFUtV1+g",
	"LFk0CoxQSCxUn4l+x2uXsEfMlcw79LDBMVF0OnzNIwNMH/J7AglxW36jO/4GCOn+yQFvgUxp8L1s3nZh",
	"P7T1eDd0UhO9LUzQyN5Ql5v8/pslTbSvtIlYt2ogv6RelTahbkfRNSnYjr4Fcxzk9jUYvrcSUJnFiUzV",
	"KzknQDAcF76jh3JkpE6+QETTetLEyH/GL286eYrN7ODom8TjV5IXzkXko7wDdyhYviPzQbOxJjC5yZSD",
	"mo/IIoMkN3esOyBShonhBkU7qGWvsCCpPbD37DegesE0S1fI5U8t+MVz2/CWw9o52GNuyzgsn4tMrV19",
	"AQgpt5tMK6ObPio0FnjySwKGz7TYyf9/w59/bq99Kvoo6tdi7ncniSUHA92Jt8gRjwfkQrHvhdCwFxlc",
	"Q8yKG1EW7xttMp9gr0vRLhdoGRmbVjbQI/2tcAK5cAJ62kI/baGfCGJkdNGLuHGB5tId3xXWTnLeTzbL",
	"Nb8ZFnubiXepWO1S3Tng38ro6E+vZo72XVh9L9Kczm0gFX71QZFkRTrgBXKs7FcmTrQdkef6h5qrg/4p",
	"L3Vc184l8FN+A4Pc0ziMC0ep/aP2h2NT+3npQbHurwYDzR+sSA3mR4fwDg0BsgP3avj+aXv45WsPp7f7",
	"39BOU/YZqdEnFt5deOctYUpEB2QJ7/ekhAWpLAZz0kLmkhIt9nJEN/nHXlTSyD8ao9Rj9A+8xP/WEH0U",
	"/s2Yo/+hmJevHa+AutekHX8avU8meucxgIqqnfJ8Z0UdmC6yFda02y1meZq4Si/pHacp35ysTU837brR",
	"XLZdr3a2fHZ2WgR9enFDrqVgMxPv8WXO54s3+uLvnri6AniyX+lK4pzydtV7aZEXJ4/+smcwuyXHgteu",
	"rv0vAAD//2a+QghLTwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
