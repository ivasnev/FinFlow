// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQAA//8rq9OTyE8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
