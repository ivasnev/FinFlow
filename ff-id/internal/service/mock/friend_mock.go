// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ivasnev/FinFlow/ff-id/internal/service (interfaces: FriendServiceInterface)

package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/ivasnev/FinFlow/ff-id/internal/service"
)

// MockFriendServiceInterface is a mock of FriendServiceInterface interface.
type MockFriendServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFriendServiceInterfaceMockRecorder
}

// MockFriendServiceInterfaceMockRecorder is the mock recorder for MockFriendServiceInterface.
type MockFriendServiceInterfaceMockRecorder struct {
	mock *MockFriendServiceInterface
}

// NewMockFriendServiceInterface creates a new mock instance.
func NewMockFriendServiceInterface(ctrl *gomock.Controller) *MockFriendServiceInterface {
	mock := &MockFriendServiceInterface{ctrl: ctrl}
	mock.recorder = &MockFriendServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendServiceInterface) EXPECT() *MockFriendServiceInterfaceMockRecorder {
	return m.recorder
}

// AcceptFriendRequest mocks base method.
func (m *MockFriendServiceInterface) AcceptFriendRequest(arg0 context.Context, arg1 int64, arg2 service.FriendActionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptFriendRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptFriendRequest indicates an expected call of AcceptFriendRequest.
func (mr *MockFriendServiceInterfaceMockRecorder) AcceptFriendRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFriendRequest", reflect.TypeOf((*MockFriendServiceInterface)(nil).AcceptFriendRequest), arg0, arg1, arg2)
}

// AddFriend mocks base method.
func (m *MockFriendServiceInterface) AddFriend(arg0 context.Context, arg1 int64, arg2 service.AddFriendRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFriend", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFriend indicates an expected call of AddFriend.
func (mr *MockFriendServiceInterfaceMockRecorder) AddFriend(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFriend", reflect.TypeOf((*MockFriendServiceInterface)(nil).AddFriend), arg0, arg1, arg2)
}

// BlockUser mocks base method.
func (m *MockFriendServiceInterface) BlockUser(arg0 context.Context, arg1 int64, arg2 service.FriendActionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockFriendServiceInterfaceMockRecorder) BlockUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockFriendServiceInterface)(nil).BlockUser), arg0, arg1, arg2)
}

// GetFriendRequests mocks base method.
func (m *MockFriendServiceInterface) GetFriendRequests(arg0 context.Context, arg1 int64, arg2, arg3 int, arg4 bool) (*service.FriendsListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendRequests", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*service.FriendsListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendRequests indicates an expected call of GetFriendRequests.
func (mr *MockFriendServiceInterfaceMockRecorder) GetFriendRequests(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendRequests", reflect.TypeOf((*MockFriendServiceInterface)(nil).GetFriendRequests), arg0, arg1, arg2, arg3, arg4)
}

// GetFriendStatus mocks base method.
func (m *MockFriendServiceInterface) GetFriendStatus(arg0 context.Context, arg1, arg2 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendStatus indicates an expected call of GetFriendStatus.
func (mr *MockFriendServiceInterfaceMockRecorder) GetFriendStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendStatus", reflect.TypeOf((*MockFriendServiceInterface)(nil).GetFriendStatus), arg0, arg1, arg2)
}

// GetFriends mocks base method.
func (m *MockFriendServiceInterface) GetFriends(arg0 context.Context, arg1 string, arg2 service.FriendsQueryParams) (*service.FriendsListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriends", arg0, arg1, arg2)
	ret0, _ := ret[0].(*service.FriendsListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriends indicates an expected call of GetFriends.
func (mr *MockFriendServiceInterfaceMockRecorder) GetFriends(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriends", reflect.TypeOf((*MockFriendServiceInterface)(nil).GetFriends), arg0, arg1, arg2)
}

// RejectFriendRequest mocks base method.
func (m *MockFriendServiceInterface) RejectFriendRequest(arg0 context.Context, arg1 int64, arg2 service.FriendActionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectFriendRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectFriendRequest indicates an expected call of RejectFriendRequest.
func (mr *MockFriendServiceInterfaceMockRecorder) RejectFriendRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectFriendRequest", reflect.TypeOf((*MockFriendServiceInterface)(nil).RejectFriendRequest), arg0, arg1, arg2)
}

// RemoveFriend mocks base method.
func (m *MockFriendServiceInterface) RemoveFriend(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFriend", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFriend indicates an expected call of RemoveFriend.
func (mr *MockFriendServiceInterfaceMockRecorder) RemoveFriend(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFriend", reflect.TypeOf((*MockFriendServiceInterface)(nil).RemoveFriend), arg0, arg1, arg2)
}
