// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ivasnev/FinFlow/ff-id/internal/repository (interfaces: Friend)

package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ivasnev/FinFlow/ff-id/internal/models"
)

// MockFriend is a mock of Friend interface.
type MockFriend struct {
	ctrl     *gomock.Controller
	recorder *MockFriendMockRecorder
}

// MockFriendMockRecorder is the mock recorder for MockFriend.
type MockFriendMockRecorder struct {
	mock *MockFriend
}

// NewMockFriend creates a new mock instance.
func NewMockFriend(ctrl *gomock.Controller) *MockFriend {
	mock := &MockFriend{ctrl: ctrl}
	mock.recorder = &MockFriendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriend) EXPECT() *MockFriendMockRecorder {
	return m.recorder
}

// AddFriend mocks base method.
func (m *MockFriend) AddFriend(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFriend", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFriend indicates an expected call of AddFriend.
func (mr *MockFriendMockRecorder) AddFriend(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFriend", reflect.TypeOf((*MockFriend)(nil).AddFriend), arg0, arg1, arg2)
}

// CreateMutualFriendship mocks base method.
func (m *MockFriend) CreateMutualFriendship(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMutualFriendship", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMutualFriendship indicates an expected call of CreateMutualFriendship.
func (mr *MockFriendMockRecorder) CreateMutualFriendship(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMutualFriendship", reflect.TypeOf((*MockFriend)(nil).CreateMutualFriendship), arg0, arg1, arg2)
}

// GetFriendRelation mocks base method.
func (m *MockFriend) GetFriendRelation(arg0 context.Context, arg1, arg2 int64) (*models.UserFriend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.UserFriend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendRelation indicates an expected call of GetFriendRelation.
func (mr *MockFriendMockRecorder) GetFriendRelation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendRelation", reflect.TypeOf((*MockFriend)(nil).GetFriendRelation), arg0, arg1, arg2)
}

// GetFriendRelationWithPreload mocks base method.
func (m *MockFriend) GetFriendRelationWithPreload(arg0 context.Context, arg1, arg2 int64, arg3, arg4 bool) (*models.UserFriend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendRelationWithPreload", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*models.UserFriend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendRelationWithPreload indicates an expected call of GetFriendRelationWithPreload.
func (mr *MockFriendMockRecorder) GetFriendRelationWithPreload(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendRelationWithPreload", reflect.TypeOf((*MockFriend)(nil).GetFriendRelationWithPreload), arg0, arg1, arg2, arg3, arg4)
}

// GetFriendRequests mocks base method.
func (m *MockFriend) GetFriendRequests(arg0 context.Context, arg1 int64, arg2, arg3 int, arg4 bool) ([]models.UserFriend, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendRequests", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]models.UserFriend)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFriendRequests indicates an expected call of GetFriendRequests.
func (mr *MockFriendMockRecorder) GetFriendRequests(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendRequests", reflect.TypeOf((*MockFriend)(nil).GetFriendRequests), arg0, arg1, arg2, arg3, arg4)
}

// GetFriends mocks base method.
func (m *MockFriend) GetFriends(arg0 context.Context, arg1 int64, arg2, arg3 int, arg4, arg5 string) ([]models.UserFriend, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriends", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]models.UserFriend)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFriends indicates an expected call of GetFriends.
func (mr *MockFriendMockRecorder) GetFriends(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriends", reflect.TypeOf((*MockFriend)(nil).GetFriends), arg0, arg1, arg2, arg3, arg4, arg5)
}

// RemoveFriend mocks base method.
func (m *MockFriend) RemoveFriend(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFriend", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFriend indicates an expected call of RemoveFriend.
func (mr *MockFriendMockRecorder) RemoveFriend(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFriend", reflect.TypeOf((*MockFriend)(nil).RemoveFriend), arg0, arg1, arg2)
}

// UpdateFriendStatus mocks base method.
func (m *MockFriend) UpdateFriendStatus(arg0 context.Context, arg1, arg2 int64, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFriendStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFriendStatus indicates an expected call of UpdateFriendStatus.
func (mr *MockFriendMockRecorder) UpdateFriendStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFriendStatus", reflect.TypeOf((*MockFriend)(nil).UpdateFriendStatus), arg0, arg1, arg2, arg3)
}
