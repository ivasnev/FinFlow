// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ivasnev/FinFlow/ff-id/internal/repository (interfaces: Avatar)

package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/ivasnev/FinFlow/ff-id/internal/models"
)

// MockAvatar is a mock of Avatar interface.
type MockAvatar struct {
	ctrl     *gomock.Controller
	recorder *MockAvatarMockRecorder
}

// MockAvatarMockRecorder is the mock recorder for MockAvatar.
type MockAvatarMockRecorder struct {
	mock *MockAvatar
}

// NewMockAvatar creates a new mock instance.
func NewMockAvatar(ctrl *gomock.Controller) *MockAvatar {
	mock := &MockAvatar{ctrl: ctrl}
	mock.recorder = &MockAvatarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvatar) EXPECT() *MockAvatarMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAvatar) Create(arg0 context.Context, arg1 *models.UserAvatar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAvatarMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAvatar)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockAvatar) Delete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAvatarMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAvatar)(nil).Delete), arg0, arg1)
}

// DeleteAllByUserID mocks base method.
func (m *MockAvatar) DeleteAllByUserID(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllByUserID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllByUserID indicates an expected call of DeleteAllByUserID.
func (mr *MockAvatarMockRecorder) DeleteAllByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllByUserID", reflect.TypeOf((*MockAvatar)(nil).DeleteAllByUserID), arg0, arg1)
}

// GetAllByUserID mocks base method.
func (m *MockAvatar) GetAllByUserID(arg0 context.Context, arg1 int64) ([]models.UserAvatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", arg0, arg1)
	ret0, _ := ret[0].([]models.UserAvatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockAvatarMockRecorder) GetAllByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockAvatar)(nil).GetAllByUserID), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockAvatar) GetByID(arg0 context.Context, arg1 uuid.UUID) (*models.UserAvatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*models.UserAvatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAvatarMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAvatar)(nil).GetByID), arg0, arg1)
}
