// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
