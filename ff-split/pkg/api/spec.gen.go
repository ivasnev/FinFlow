// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd3W4bR7J+lcHkXNIWfZJzEOjOjuIDH2wQI5axF7agjMmWNTE5w8wMtcsYAizJ3sSw",
	"EWcXARwsNvE6eQFasWJKFqlX6H6jRVXPL7t7fqjhr3iTUDSnu6arvqqvq/rnoV6zmy3bIpbn6qsPdbe2",
	"TZoGfrxa88wd0+v8yXS9L4jbsi2XwPctx24RxzMJ/srgv/L/Mj3SxA//5ZAtfVX/YCVqfsVveyVoOGx0",
	"t6J7nRbRV3XDcYyOvht9Yd/7itQ8+EX01Ndt4nqiJHXi1hyz5Zm2Jfyp01/oGe2xPdqlfdqjRxrt0hO2",
	"T3v0kPbpgO3BZz3s1vUc07oP3Zo129o062KLN9Y02qMndED79CT+rGl55D5x4OG2Sxzlw2d0QN+z5/Qd",
	"HdBD2mX79Ii+Zy/0ir5lO03D403970eSlncrukO+bpsOqeurdxJtb6QOXYYWO0phU0cr9sZ1wyOe2SQS",
	"DfyI79jVaE+jh+wRPaKn7IWq5XAIoMFL2KJEOTOncqnh1uu3XeK4SsP1rcSVvMJr/xUG9ERT2gw9osca",
	"fQvGA/8b0De0Sw/x+z7toUWFuMw0LQkU46YWyiqzs08Mj9y3nQyPUeO/KuIxgoaLeYzoKcXAnwvbliG1",
	"8p9pl74D3QRGd+Kr6Xc6YI9oT2ZyQ2OMLW+kvpBqbOGNsgbzRs221tY/R0tXvHuKzGMbAeXbruM/CN38",
	"Snv0TN44sdpNGEiyQywPOnMMywUXl/CPEeDXyD0PRkR0i027bXmSzv+N73hKj9gjDrn39HfaTfgtu32v",
	"EXNaVrt5jw/blmM3N1MjA2/wDxy/k2SzatimN8alk4DdThflBB31W9pj+zjAOYWJjbiqabYPzdE+fYd+",
	"+W8KM5NZBugr3cfUyT0vv3sJ9J/Lq6y1m80OOHSlW7HM2gMlNkCjffDY9FSrQ1OXUohAhp8I+pH5ik8d",
	"x3bUA0Tgn/PEzAH7jvbom6QbVAjEG5VKA0hMVxmCNb/OsMVi8QAf+YwADl0p3EEfJnE3YVCzojHtAfxp",
	"P1WJoOd49BU8T1LoSilU4LzhXj5uSmv3w7maOuYLJgWpHLpeOqBn0CR7AVROhpiK3uT6zmVOMdsoEN5y",
	"ipI3yCcNWxjue0bDsGoywf5Ou/Q9iMX2MoWKDfyM608llaqBHBZfsmIremvb9mzp+N2+DZHuMR1A+MxH",
	"ewJ6JjrIv3rEsYzGZrst64r+A+IK+w6lP9agZ5msW2aDKFoIhO3SYzAkBQXOVk1ZzDm1e9XQKf1UiS9e",
	"1gsI/iCuHplv+LzlmU3zG1KfLGPF0Lw5BiROmAqDjPsYuHv0He2h1FxdfToA/zYVtrybpeh03mQHP90s",
	"RnoFW8rFBW5tGw6RWl66BntjniaML9dW0XeMRpvkg1QvD6Ck49qu1YjrqtXs8h/IiCHbhzdiB2xPg//Q",
	"M3rEnoAbG+DHR7Q7PGz3bLtBDEtwQkEnMt9zq2PVJpfHYnu0R/vsCWK0j3iN3mIy2ax1w30gtfSaQwyP",
	"1DcNLyXLiS/7jr7l0SBpamXmNAEWb2mXfSsPVWNz3aompfLEnms5pu2YXkfybq+QXiLJBINg+9mteabX",
	"kEHzJe2CP6fv0b5wvpYxUGNM1UstK92pe4b7IL8rDyw1lweHH5dVQ8kY0wuo67h34QJH3W0otZFmBrmV",
	"L1V2FGAzDC76YQG7ix4qlolJPKgwRSWT/YW+YU9pF4MEO6Cn9BTcrZwmFEnHFjKHCsyLB5zmsWcQt6Dj",
	"M5g+IMV8X+pUNJ0ExQBnOwF0jXrdhM9G42ZyGpQ9IiLNAVLhU9ujoK4E+Oekh+ecBCXHyV3xJEN+4uel",
	"1QeQ/UikR0AHdYIWcWq8UuAbXUVvW6bnSosFYCrnojiX2AH7FqRi+/60ZkAPy2Q1/lQyfJfIwv0Hg5fY",
	"yIKmslyswubrEgBZuISc2VU63fInTUJXfCKY4JsjFREmMX9W+a73ocd6zp6WMIXODcqSHZsL0061mno5",
	"0+Fp+gtnthIFzr4ry5Edg8lbOgkIXVuuAYP2bjr2ltkgucnn0DNiEsHyc5yqDCc7wME8wpxNjx5rKTFa",
	"o4c4j0RPewQ4O1dQ/omvV8ldravkLwQWaRSTzRmZ5kINTm7mA0AmtTZMCW6BEXGdXyOGQ5yrbW8b6xv4",
	"1/Wg8f//87ouMJIf6KGfYAvzAhAGvkVHekTfabxJDX5ET8BY9Apf2YbJD/zHSOBtz2vpuyCcaW3hyNZs",
	"yzNqGN+4+vTrpnW9Yf9FWydGU6RIV2/eiOUtQIhDPk/S2AHiNbEch6cGDtHvIwdgz+gpeAnEN3tCB5g1",
	"OMUgp/k9X75r3bXo66hxLXQEfCUTdsFe4FSKPWYHtO97mgHt0y7q0F/0xJ77wq7etS5p9DeJhPKYxEXq",
	"cfnfsGfRt9jQ62TCA4P0gO2zPWz4D1x3FfybxCMeYyM8p5bwbsmBGdBDFI/+Qd+yA6WBhlJJXy+aH3aD",
	"lxIXh8UaAane4Ms802Doh1x8NDSxlH+XP33X+uADjf4Afgv6xzF7zCMxt1tU7EvahfjMnnLPxp7RI41Y",
	"9ZZtWp6r+S7vDTtg38NMuatqDZSTgoLVu9aXX3551wKs2Y75jQH2uxr87m67Wv2wZmAGcNOzHxALvyH+",
	"Q3pFb5g14gcOHxef3ViPTc1DmNxqNUxPu0WcHbNGtKs3b+gVfYc4LofLlcvVy1V4zG4Ry2iZ+qr+4eXq",
	"5Q/1it4yvG10CitGy1zZubISRFv47j7xpEEBzO4QjeQp7XIA7MUr9YcIyidiZD4GfJ6gxcWLAGgGZ8iU",
	"IDbhKN2o66v6/xHvk2jxGkjrGE3iYdC8U2SBkgk/+LpNnI4ehJuoDutT9IjRe06b+P7LyLtSDhdN7e5u",
	"QDs83OOw/ne1Gjg4wgm80Wo1zBq+48pXLp87FusqwSnQj6YtmxB0AIbwPyWKlVz4IpNniEawF+ASonUu",
	"3ciJY/Kcx612s2mAGer0FXocmMP10JkmjU18v4ruGffBQuIrHzeg0WEjX3lo1neLWTpmyR9jX6e+R/le",
	"AwIgslBwlUiXer6Fs4MUC+9c62ABOdXGVcsD0L4By5F5m/VUmxbJw4XFU6rt/iSo+4Vc3QCrj6ofTRBW",
	"/xwOihrwWw3pxzGG9D6Aac7RLsT+73MAnC9ELSOESYgZuhgBxp/y5XRjtFdxTV+m85dLv1gBQKWhwEb8",
	"dY4bmK51pUm0kEijh+/7dQ35iiSc1Ca1/wnWJz/1Fz87PMF+za53ylV9kLnfTeYfwbvuCmZ3pey+U9T7",
	"L9koJQuyA+4eJ2l0P9MjLBk8QrM78Sd+mETvhpyfVxFAepg+zh0yQsvlrlJlrgIUhl0lEKFN/LTL8dEg",
	"niyL8hsOXjDtlfcX8B4BJmvYagCTIZ4jZTCbJIYpOZfIzoqMk0IMryIpgI4DPpSo98HkyYNcKpFADOYO",
	"E76NBvQhNyYqZcwCZL31lIgIaIOc+s8nJLLDhYpSS8duiYwxUusC2Gi1FUsDfLoUxoRCyBAQcbtVN6YV",
	"I2aBtlWnTttwO6uv03hwmgPqtvQT5fiJCNW98njlSrDl/TzTcnFDOS5hVVX0hWh7NTw84VoHAbI4cVd6",
	"ekRmgkA6oPMf2CQHD6RsL/KtOHayRsFkATuAICcWtJ5rfvEsR+TjSYRAiwsQ/IbPD5lw2kI89ERidz9I",
	"VJbIW3SXeYsJ5C0kyFHhMk+Ewe+CPwolNOSCyNIY0wBqRdW4EQlToOIz7cSIFHzxtMgUSJ1MpkWoqgwl",
	"RQoAroS0CH2jOgpIRdA6k86IzBG0cgU2eY5FpYglzCZGRNOAds4cS16Y8RzLogSwGSGu1ekTVyFz011m",
	"bi6U9xHyNiXx6nDLxqhpm2CT/0AxHZYna9ag24XL0wgHDGTmaGKjN/8BMXiZHPmYxBbJdAsNz2S4NIKt",
	"ph1TETivTKEF600c97B4Zqw+MCPTnlOHmz1ZMIPPb1xq01cmI19iID1ge7iqWmLMITscwQUHKkYDvph2",
	"+2MEfKUe2bM5JArSdxny0KO54mAL/ahcIdwqUsDXrhvug8VzscKpFZmeNRy7+XebsRMlcjAFPL1jpKJN",
	"2A87KFysAQUtQKEmfkDJhIs0idM4ZGb1Mto4tizMTL4wE0OHBG5ZYQD/hg+FajDJPmW1l0njTpm28rgg",
	"c1RzSeBpyrWWuCwLWGNJx04pq02jIHmkokUzU0iZLaxkBh7VItX4kC8RMzbWp8DMuVehpiGG10XmPbjM",
	"AD+sTocfLusfF9SNCHWPc9DW2M0loycxZKdtFElnxLIti5fVUJyQmJXckI3p/O9klRxUVbgwUjzrIXYL",
	"4bFo9iMGlQVIgognZE46FyI73FNigr8KunuxTI1MPDUig9CICfPopzxhEv1dJG+iEEiaP5kOctVMNyHP",
	"HGVTpFCcclZFJtPiZVeKwa+MZIviTMk08jY7uZdZBFjeeKfIxEj1sUTbxIhqOt7Om6jJhTY/YbNQ0Wx2",
	"mG11JpjtMqlzwT3RcHKnPOIdnOM96kqVlDt1cqd68IKfhcvxCCdfZ65cUZ8mPvc1jRHMJDBm/9YAdYbn",
	"x+jy8SCgpnR3mPdAs+AG9XV7UU7iGL4TfsIRMM9k8pVUcT3hhnm+3nCZ3ykbuBGWsoF7mH0mRoDdrAi0",
	"4l+CfI5IlHUjcpE9F1yYZUTKvGV63uNSjmu0RzJl9Nm5ChLpt7EXrkeE98QvQLgS7ryfcC1i+KoR0RzX",
	"0pSXPERjGa7GX45Ix9IoWIa/4UOhtZtKLPfou7xR6AvStHcIWOB1x25OnIAq8zr+hV7zfBTpKxVaYzWL",
	"yWcuVFIJ2Yt5XxE6GjpGR+4Et0WeP4hLtkyCD5iRCsqMg3+5G7P03ZhajmCqTjY2Dcu4TxK36RTemiRc",
	"fFDw9hxOi4NbLubn+pzy6XR008dU2HSui0bE2zyWi3omvt9plLtGhqAe3imUlzOfF+Z8TU9emC9vEJow",
	"55bgesorhBbz3qAhrp0bySVsKpFcQFsIwXwdwxLBc0AKqtMmBcv1EBfaywlbXc7BWMwaTFvKuCQtuIR1",
	"QE9k8/ob2NE5sZTrimzoSX43dsYsOP4Gi3U9WlI3gWlw3Y90YkZ4465kfz6fcoIWxnQRGjQ9pVlcaFvS",
	"NarhLcTLadvkp21Jkxy2cYXnKzxRSzN8PgnzDT9PunK+Njok7HvK05e4LAs4cUm35ZJO445uTT9Ku5wM",
	"7LnAJobZsel0X606Gjs2KkuzLj31nmXYJZx+HVegfJI9Xg89A3ynOnG+s5yRXlCEC3PR3DQMy9Rux6ql",
	"1sUA50+wQtcPqnXsID0TpyjZsSca29O2ti6Z9eid+AzpVHAUtzpWDdcKj2kKE7Y/h2uR2Z5MK8mTUJez",
	"nfJnO8pBz1ipnL58RFznVcKZZHyYH9MeSJBWRJfuhSmyZXbG12Rkr6FUHjKm0OdyadY4t+lEdpuyVksG",
	"KGiY1NoO3m1556F+jRgOca62vW199c4G2JhLnB15MWeN7JCG3WoSy9P4r/SK3nYa+qq+7Xmt1ZWVhl0z",
	"Gtu2661+XP34ig7N+RJI8hVnuDcuIGJ4H6l0WRk9xRKOjyX/+k5J+UfWomQD3lB7iWUxOVtVDTi0LF9C",
	"dhx1yFWRtyfxVowh+WMXY+RtMzpXrjs0FnjoVN5mhrP5Q4LFEvp5W4ymREOCcVq2u7H7nwAAAP//VnXX",
	"cZK2AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
