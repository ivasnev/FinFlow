// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
