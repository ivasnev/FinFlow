// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oJahsQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
