// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
