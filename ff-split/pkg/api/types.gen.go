// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"time"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CategoryType.
const (
	Event       CategoryType = "event"
	Transaction CategoryType = "transaction"
)

// Defines values for TransactionRequestType.
const (
	Amount  TransactionRequestType = "amount"
	Percent TransactionRequestType = "percent"
	Units   TransactionRequestType = "units"
)

// ActivityListResponse defines model for ActivityListResponse.
type ActivityListResponse struct {
	Activities *[]ActivityResponse `json:"activities,omitempty"`
}

// ActivityRequest defines model for ActivityRequest.
type ActivityRequest struct {
	// Description Описание активности
	Description string `json:"description"`

	// IconId ID иконки
	IconId *int `json:"icon_id,omitempty"`

	// UserId ID пользователя
	UserId *int64 `json:"user_id,omitempty"`
}

// ActivityResponse defines model for ActivityResponse.
type ActivityResponse struct {
	// ActivityId ID активности
	ActivityId *int `json:"activity_id,omitempty"`

	// Datetime Дата и время активности
	Datetime *time.Time `json:"datetime,omitempty"`

	// Description Описание активности
	Description *string `json:"description,omitempty"`

	// IconId ID иконки
	IconId *int `json:"icon_id,omitempty"`
}

// AddUsersRequest defines model for AddUsersRequest.
type AddUsersRequest struct {
	// UserIds Список ID пользователей для добавления
	UserIds []int64 `json:"user_ids"`
}

// CategoryListResponse defines model for CategoryListResponse.
type CategoryListResponse struct {
	Categories *[]CategoryResponse `json:"categories,omitempty"`
}

// CategoryRequest defines model for CategoryRequest.
type CategoryRequest struct {
	// IconId ID иконки
	IconId *int `json:"icon_id,omitempty"`

	// Name Название категории
	Name string `json:"name"`
}

// CategoryResponse defines model for CategoryResponse.
type CategoryResponse struct {
	Icon *IconDTO `json:"icon,omitempty"`

	// Id ID категории
	Id *int `json:"id,omitempty"`

	// Name Название категории
	Name *string `json:"name,omitempty"`
}

// CategoryType Тип категории
type CategoryType string

// DebtDTO defines model for DebtDTO.
type DebtDTO struct {
	// Amount Размер долга
	Amount *float64 `json:"amount,omitempty"`

	// FromUserId ID должника
	FromUserId *int64 `json:"from_user_id,omitempty"`

	// Id ID долга
	Id *int `json:"id,omitempty"`

	// ToUserId ID кредитора
	ToUserId *int64 `json:"to_user_id,omitempty"`

	// TransactionId ID транзакции
	TransactionId *int `json:"transaction_id,omitempty"`
}

// DebtListResponse defines model for DebtListResponse.
type DebtListResponse struct {
	Debts *[]DebtDTO `json:"debts,omitempty"`
}

// DummyUserRequest defines model for DummyUserRequest.
type DummyUserRequest struct {
	// Nickname Никнейм dummy-пользователя
	Nickname string `json:"nickname"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Описание ошибки
	Error string `json:"error"`
}

// EventListResponse defines model for EventListResponse.
type EventListResponse struct {
	Events *[]EventResponse `json:"events,omitempty"`
}

// EventMembersDTO defines model for EventMembersDTO.
type EventMembersDTO struct {
	// DummiesNames Список имен dummy-пользователей
	DummiesNames *[]string `json:"dummies_names,omitempty"`

	// UserIds Список ID пользователей
	UserIds *[]int64 `json:"user_ids,omitempty"`
}

// EventRequest defines model for EventRequest.
type EventRequest struct {
	// CategoryId ID категории
	CategoryId *int `json:"category_id,omitempty"`

	// Description Описание мероприятия
	Description *string          `json:"description,omitempty"`
	Members     *EventMembersDTO `json:"members,omitempty"`

	// Name Название мероприятия
	Name string `json:"name"`
}

// EventResponse defines model for EventResponse.
type EventResponse struct {
	// Balance Баланс мероприятия
	Balance *int `json:"balance,omitempty"`

	// CategoryId ID категории
	CategoryId *int `json:"category_id,omitempty"`

	// Description Описание мероприятия
	Description *string `json:"description,omitempty"`

	// Id ID мероприятия
	Id *int64 `json:"id,omitempty"`

	// Name Название мероприятия
	Name *string `json:"name,omitempty"`

	// PhotoId UUID фото
	PhotoId *string `json:"photo_id,omitempty"`
}

// IconDTO defines model for IconDTO.
type IconDTO struct {
	// ExternalUuid Внешний UUID
	ExternalUuid *string `json:"external_uuid,omitempty"`

	// FileUuid UUID файла иконки
	FileUuid *string `json:"file_uuid,omitempty"`

	// Id ID иконки
	Id *int `json:"id,omitempty"`

	// Name Название иконки
	Name *string `json:"name,omitempty"`
}

// IconRequest defines model for IconRequest.
type IconRequest struct {
	// FileUuid UUID файла иконки
	FileUuid string `json:"file_uuid"`

	// Name Название иконки
	Name string `json:"name"`
}

// OptimizedDebtDTO defines model for OptimizedDebtDTO.
type OptimizedDebtDTO struct {
	// Amount Размер долга
	Amount *float64 `json:"amount,omitempty"`

	// EventId ID мероприятия
	EventId *int64 `json:"event_id,omitempty"`

	// FromUserId ID должника
	FromUserId *int64 `json:"from_user_id,omitempty"`

	// Id ID оптимизированного долга
	Id *int `json:"id,omitempty"`

	// ToUserId ID кредитора
	ToUserId *int64 `json:"to_user_id,omitempty"`
}

// OptimizedDebtListResponse defines model for OptimizedDebtListResponse.
type OptimizedDebtListResponse struct {
	OptimizedDebts *[]OptimizedDebtDTO `json:"optimized_debts,omitempty"`
}

// ShareDTO defines model for ShareDTO.
type ShareDTO struct {
	// Id ID доли
	Id *int `json:"id,omitempty"`

	// TransactionId ID транзакции
	TransactionId *int `json:"transaction_id,omitempty"`

	// UserId ID пользователя
	UserId *int64 `json:"user_id,omitempty"`

	// Value Размер доли
	Value *float64 `json:"value,omitempty"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	// Success Статус успеха операции
	Success bool `json:"success"`
}

// SyncUsersRequest defines model for SyncUsersRequest.
type SyncUsersRequest struct {
	// UserIds Список ID пользователей для синхронизации
	UserIds []int64 `json:"user_ids"`
}

// TaskDTO defines model for TaskDTO.
type TaskDTO struct {
	// CreatedAt Дата создания
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Описание задачи
	Description *string `json:"description,omitempty"`

	// EventId ID мероприятия
	EventId *int64 `json:"event_id,omitempty"`

	// Id ID задачи
	Id *int `json:"id,omitempty"`

	// Priority Приоритет задачи
	Priority *int `json:"priority,omitempty"`

	// Title Заголовок задачи
	Title *string `json:"title,omitempty"`

	// UserId ID пользователя
	UserId *int64 `json:"user_id,omitempty"`
}

// TaskListResponse defines model for TaskListResponse.
type TaskListResponse struct {
	Tasks *[]TaskDTO `json:"tasks,omitempty"`
}

// TaskRequest defines model for TaskRequest.
type TaskRequest struct {
	// Description Описание задачи
	Description *string `json:"description,omitempty"`

	// Priority Приоритет задачи
	Priority *int `json:"priority,omitempty"`

	// Title Заголовок задачи
	Title string `json:"title"`

	// UserId ID пользователя
	UserId int64 `json:"user_id"`
}

// TaskResponse defines model for TaskResponse.
type TaskResponse struct {
	Task *TaskDTO `json:"task,omitempty"`
}

// TransactionListResponse defines model for TransactionListResponse.
type TransactionListResponse struct {
	Transactions *[]TransactionResponse `json:"transactions,omitempty"`
}

// TransactionRequest defines model for TransactionRequest.
type TransactionRequest struct {
	// Amount Общая сумма транзакции
	Amount float64 `json:"amount"`

	// FromUser ID пользователя, который заплатил
	FromUser int64 `json:"from_user"`

	// Name Название транзакции
	Name string `json:"name"`

	// Portion Распределение долей
	Portion *map[string]float64 `json:"portion,omitempty"`

	// TransactionCategoryId ID категории транзакции
	TransactionCategoryId *int `json:"transaction_category_id,omitempty"`

	// Type Тип распределения
	Type TransactionRequestType `json:"type"`

	// Users Список ID пользователей-участников
	Users []int64 `json:"users"`
}

// TransactionRequestType Тип распределения
type TransactionRequestType string

// TransactionResponse defines model for TransactionResponse.
type TransactionResponse struct {
	// Amount Сумма транзакции
	Amount *float64 `json:"amount,omitempty"`

	// Datetime Дата и время транзакции
	Datetime *time.Time `json:"datetime,omitempty"`

	// Debts Долги
	Debts *[]DebtDTO `json:"debts,omitempty"`

	// EventId ID мероприятия
	EventId *int64 `json:"event_id,omitempty"`

	// FromUser ID плательщика
	FromUser *int64 `json:"from_user,omitempty"`

	// Id ID транзакции
	Id *int `json:"id,omitempty"`

	// Name Название транзакции
	Name *string `json:"name,omitempty"`

	// Shares Доли пользователей
	Shares *[]ShareDTO `json:"shares,omitempty"`

	// TransactionCategoryId ID категории транзакции
	TransactionCategoryId *int `json:"transaction_category_id,omitempty"`

	// Type Тип распределения
	Type *string `json:"type,omitempty"`
}

// UserListResponse defines model for UserListResponse.
type UserListResponse struct {
	Users *[]UserProfileDTO `json:"users,omitempty"`
}

// UserProfileDTO defines model for UserProfileDTO.
type UserProfileDTO struct {
	// Name Имя пользователя
	Name *string `json:"name,omitempty"`

	// Nickname Никнейм пользователя
	Nickname *string `json:"nickname,omitempty"`

	// Photo UUID фото пользователя
	Photo *string `json:"photo,omitempty"`

	// UserId ID пользователя
	UserId *int64 `json:"user_id,omitempty"`
}

// GetCategoriesParams defines parameters for GetCategories.
type GetCategoriesParams struct {
	// CategoryType Тип категории
	CategoryType CategoryType `form:"category_type" json:"category_type"`
}

// GetCategoryByIDParams defines parameters for GetCategoryByID.
type GetCategoryByIDParams struct {
	// CategoryType Тип категории
	CategoryType CategoryType `form:"category_type" json:"category_type"`
}

// CreateCategoryParams defines parameters for CreateCategory.
type CreateCategoryParams struct {
	// CategoryType Тип категории
	CategoryType CategoryType `form:"category_type" json:"category_type"`
}

// DeleteCategoryParams defines parameters for DeleteCategory.
type DeleteCategoryParams struct {
	// CategoryType Тип категории
	CategoryType CategoryType `form:"category_type" json:"category_type"`
}

// UpdateCategoryParams defines parameters for UpdateCategory.
type UpdateCategoryParams struct {
	// CategoryType Тип категории
	CategoryType CategoryType `form:"category_type" json:"category_type"`
}

// CreateEventJSONRequestBody defines body for CreateEvent for application/json ContentType.
type CreateEventJSONRequestBody = EventRequest

// UpdateEventJSONRequestBody defines body for UpdateEvent for application/json ContentType.
type UpdateEventJSONRequestBody = EventRequest

// CreateActivityJSONRequestBody defines body for CreateActivity for application/json ContentType.
type CreateActivityJSONRequestBody = ActivityRequest

// UpdateActivityJSONRequestBody defines body for UpdateActivity for application/json ContentType.
type UpdateActivityJSONRequestBody = ActivityRequest

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = TaskRequest

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = TaskRequest

// CreateTransactionJSONRequestBody defines body for CreateTransaction for application/json ContentType.
type CreateTransactionJSONRequestBody = TransactionRequest

// UpdateTransactionJSONRequestBody defines body for UpdateTransaction for application/json ContentType.
type UpdateTransactionJSONRequestBody = TransactionRequest

// AddUsersToEventJSONRequestBody defines body for AddUsersToEvent for application/json ContentType.
type AddUsersToEventJSONRequestBody = AddUsersRequest

// CreateDummyUserJSONRequestBody defines body for CreateDummyUser for application/json ContentType.
type CreateDummyUserJSONRequestBody = DummyUserRequest

// CreateCategoryJSONRequestBody defines body for CreateCategory for application/json ContentType.
type CreateCategoryJSONRequestBody = CategoryRequest

// UpdateCategoryJSONRequestBody defines body for UpdateCategory for application/json ContentType.
type UpdateCategoryJSONRequestBody = CategoryRequest

// CreateIconJSONRequestBody defines body for CreateIcon for application/json ContentType.
type CreateIconJSONRequestBody = IconRequest

// UpdateIconJSONRequestBody defines body for UpdateIcon for application/json ContentType.
type UpdateIconJSONRequestBody = IconRequest

// SyncUsersJSONRequestBody defines body for SyncUsers for application/json ContentType.
type SyncUsersJSONRequestBody = SyncUsersRequest
