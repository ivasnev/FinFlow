// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить список категорий
	// (GET /api/v1/category)
	GetCategories(c *gin.Context)
	// Получить категорию
	// (GET /api/v1/category/{id})
	GetCategoryByID(c *gin.Context, id int)
	// Получить список мероприятий
	// (GET /api/v1/event)
	GetEvents(c *gin.Context)
	// Создать мероприятие
	// (POST /api/v1/event)
	CreateEvent(c *gin.Context)
	// Удалить мероприятие
	// (DELETE /api/v1/event/{id_event})
	DeleteEvent(c *gin.Context, idEvent int64)
	// Получить мероприятие
	// (GET /api/v1/event/{id_event})
	GetEventByID(c *gin.Context, idEvent int64)
	// Обновить мероприятие
	// (PUT /api/v1/event/{id_event})
	UpdateEvent(c *gin.Context, idEvent int64)
	// Получить активности мероприятия
	// (GET /api/v1/event/{id_event}/activity)
	GetActivitiesByEventID(c *gin.Context, idEvent int64)
	// Создать активность
	// (POST /api/v1/event/{id_event}/activity)
	CreateActivity(c *gin.Context, idEvent int64)
	// Удалить активность
	// (DELETE /api/v1/event/{id_event}/activity/{id_activity})
	DeleteActivity(c *gin.Context, idEvent int64, idActivity int)
	// Получить активность
	// (GET /api/v1/event/{id_event}/activity/{id_activity})
	GetActivityByID(c *gin.Context, idEvent int64, idActivity int)
	// Обновить активность
	// (PUT /api/v1/event/{id_event}/activity/{id_activity})
	UpdateActivity(c *gin.Context, idEvent int64, idActivity int)
	// Получить долги мероприятия
	// (GET /api/v1/event/{id_event}/debts)
	GetDebtsByEventID(c *gin.Context, idEvent int64)
	// Получить оптимизированные долги
	// (GET /api/v1/event/{id_event}/optimized-debts)
	GetOptimizedDebtsByEventID(c *gin.Context, idEvent int64)
	// Оптимизировать долги
	// (POST /api/v1/event/{id_event}/optimized-debts)
	OptimizeDebts(c *gin.Context, idEvent int64)
	// Получить задачи мероприятия
	// (GET /api/v1/event/{id_event}/task)
	GetTasksByEventID(c *gin.Context, idEvent int64)
	// Создать задачу
	// (POST /api/v1/event/{id_event}/task)
	CreateTask(c *gin.Context, idEvent int64)
	// Удалить задачу
	// (DELETE /api/v1/event/{id_event}/task/{id_task})
	DeleteTask(c *gin.Context, idEvent int64, idTask int)
	// Получить задачу
	// (GET /api/v1/event/{id_event}/task/{id_task})
	GetTaskByID(c *gin.Context, idEvent int64, idTask int)
	// Обновить задачу
	// (PUT /api/v1/event/{id_event}/task/{id_task})
	UpdateTask(c *gin.Context, idEvent int64, idTask int)
	// Получить транзакции мероприятия
	// (GET /api/v1/event/{id_event}/transaction)
	GetTransactionsByEventID(c *gin.Context, idEvent int64)
	// Создать транзакцию
	// (POST /api/v1/event/{id_event}/transaction)
	CreateTransaction(c *gin.Context, idEvent int64)
	// Удалить транзакцию
	// (DELETE /api/v1/event/{id_event}/transaction/{id_transaction})
	DeleteTransaction(c *gin.Context, idEvent int64, idTransaction int)
	// Получить транзакцию
	// (GET /api/v1/event/{id_event}/transaction/{id_transaction})
	GetTransactionByID(c *gin.Context, idEvent int64, idTransaction int)
	// Обновить транзакцию
	// (PUT /api/v1/event/{id_event}/transaction/{id_transaction})
	UpdateTransaction(c *gin.Context, idEvent int64, idTransaction int)
	// Получить пользователей мероприятия
	// (GET /api/v1/event/{id_event}/user)
	GetUsersByEventID(c *gin.Context, idEvent int64)
	// Добавить пользователей в мероприятие
	// (POST /api/v1/event/{id_event}/user)
	AddUsersToEvent(c *gin.Context, idEvent int64)
	// Получить dummy-пользователей
	// (GET /api/v1/event/{id_event}/user/dummies)
	GetDummiesByEventID(c *gin.Context, idEvent int64)
	// Создать dummy-пользователя
	// (POST /api/v1/event/{id_event}/user/dummy)
	CreateDummyUser(c *gin.Context, idEvent int64)
	// Удалить пользователя из мероприятия
	// (DELETE /api/v1/event/{id_event}/user/{id_user})
	RemoveUserFromEvent(c *gin.Context, idEvent int64, idUser int64)
	// Получить оптимизированные долги пользователя
	// (GET /api/v1/event/{id_event}/user/{id_user}/optimized-debts)
	GetOptimizedDebtsByUserID(c *gin.Context, idEvent int64, idUser int64)
	// Создать категорию
	// (POST /api/v1/manage/category)
	CreateCategory(c *gin.Context)
	// Удалить категорию
	// (DELETE /api/v1/manage/category/{id})
	DeleteCategory(c *gin.Context, id int)
	// Обновить категорию
	// (PUT /api/v1/manage/category/{id})
	UpdateCategory(c *gin.Context, id int)
	// Получить список иконок
	// (GET /api/v1/manage/icons)
	GetIcons(c *gin.Context)
	// Создать иконку
	// (POST /api/v1/manage/icons)
	CreateIcon(c *gin.Context)
	// Удалить иконку
	// (DELETE /api/v1/manage/icons/{id})
	DeleteIcon(c *gin.Context, id int)
	// Получить иконку
	// (GET /api/v1/manage/icons/{id})
	GetIconByID(c *gin.Context, id int)
	// Обновить иконку
	// (PUT /api/v1/manage/icons/{id})
	UpdateIcon(c *gin.Context, id int)
	// Синхронизировать пользователей
	// (POST /api/v1/user/sync)
	SyncUsers(c *gin.Context)
	// Получить профиль пользователя
	// (GET /api/v1/user/{id_user})
	GetUserByID(c *gin.Context, idUser int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCategories operation middleware
func (siw *ServerInterfaceWrapper) GetCategories(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCategories(c)
}

// GetCategoryByID operation middleware
func (siw *ServerInterfaceWrapper) GetCategoryByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCategoryByID(c, id)
}

// GetEvents operation middleware
func (siw *ServerInterfaceWrapper) GetEvents(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEvents(c)
}

// CreateEvent operation middleware
func (siw *ServerInterfaceWrapper) CreateEvent(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEvent(c)
}

// DeleteEvent operation middleware
func (siw *ServerInterfaceWrapper) DeleteEvent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteEvent(c, idEvent)
}

// GetEventByID operation middleware
func (siw *ServerInterfaceWrapper) GetEventByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEventByID(c, idEvent)
}

// UpdateEvent operation middleware
func (siw *ServerInterfaceWrapper) UpdateEvent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateEvent(c, idEvent)
}

// GetActivitiesByEventID operation middleware
func (siw *ServerInterfaceWrapper) GetActivitiesByEventID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivitiesByEventID(c, idEvent)
}

// CreateActivity operation middleware
func (siw *ServerInterfaceWrapper) CreateActivity(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateActivity(c, idEvent)
}

// DeleteActivity operation middleware
func (siw *ServerInterfaceWrapper) DeleteActivity(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id_activity" -------------
	var idActivity int

	err = runtime.BindStyledParameterWithOptions("simple", "id_activity", c.Param("id_activity"), &idActivity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_activity: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteActivity(c, idEvent, idActivity)
}

// GetActivityByID operation middleware
func (siw *ServerInterfaceWrapper) GetActivityByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id_activity" -------------
	var idActivity int

	err = runtime.BindStyledParameterWithOptions("simple", "id_activity", c.Param("id_activity"), &idActivity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_activity: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetActivityByID(c, idEvent, idActivity)
}

// UpdateActivity operation middleware
func (siw *ServerInterfaceWrapper) UpdateActivity(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id_activity" -------------
	var idActivity int

	err = runtime.BindStyledParameterWithOptions("simple", "id_activity", c.Param("id_activity"), &idActivity, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_activity: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateActivity(c, idEvent, idActivity)
}

// GetDebtsByEventID operation middleware
func (siw *ServerInterfaceWrapper) GetDebtsByEventID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDebtsByEventID(c, idEvent)
}

// GetOptimizedDebtsByEventID operation middleware
func (siw *ServerInterfaceWrapper) GetOptimizedDebtsByEventID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOptimizedDebtsByEventID(c, idEvent)
}

// OptimizeDebts operation middleware
func (siw *ServerInterfaceWrapper) OptimizeDebts(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OptimizeDebts(c, idEvent)
}

// GetTasksByEventID operation middleware
func (siw *ServerInterfaceWrapper) GetTasksByEventID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTasksByEventID(c, idEvent)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTask(c, idEvent)
}

// DeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id_task" -------------
	var idTask int

	err = runtime.BindStyledParameterWithOptions("simple", "id_task", c.Param("id_task"), &idTask, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_task: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTask(c, idEvent, idTask)
}

// GetTaskByID operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id_task" -------------
	var idTask int

	err = runtime.BindStyledParameterWithOptions("simple", "id_task", c.Param("id_task"), &idTask, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_task: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskByID(c, idEvent, idTask)
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id_task" -------------
	var idTask int

	err = runtime.BindStyledParameterWithOptions("simple", "id_task", c.Param("id_task"), &idTask, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_task: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTask(c, idEvent, idTask)
}

// GetTransactionsByEventID operation middleware
func (siw *ServerInterfaceWrapper) GetTransactionsByEventID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTransactionsByEventID(c, idEvent)
}

// CreateTransaction operation middleware
func (siw *ServerInterfaceWrapper) CreateTransaction(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTransaction(c, idEvent)
}

// DeleteTransaction operation middleware
func (siw *ServerInterfaceWrapper) DeleteTransaction(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id_transaction" -------------
	var idTransaction int

	err = runtime.BindStyledParameterWithOptions("simple", "id_transaction", c.Param("id_transaction"), &idTransaction, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_transaction: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTransaction(c, idEvent, idTransaction)
}

// GetTransactionByID operation middleware
func (siw *ServerInterfaceWrapper) GetTransactionByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id_transaction" -------------
	var idTransaction int

	err = runtime.BindStyledParameterWithOptions("simple", "id_transaction", c.Param("id_transaction"), &idTransaction, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_transaction: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTransactionByID(c, idEvent, idTransaction)
}

// UpdateTransaction operation middleware
func (siw *ServerInterfaceWrapper) UpdateTransaction(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id_transaction" -------------
	var idTransaction int

	err = runtime.BindStyledParameterWithOptions("simple", "id_transaction", c.Param("id_transaction"), &idTransaction, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_transaction: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTransaction(c, idEvent, idTransaction)
}

// GetUsersByEventID operation middleware
func (siw *ServerInterfaceWrapper) GetUsersByEventID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersByEventID(c, idEvent)
}

// AddUsersToEvent operation middleware
func (siw *ServerInterfaceWrapper) AddUsersToEvent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddUsersToEvent(c, idEvent)
}

// GetDummiesByEventID operation middleware
func (siw *ServerInterfaceWrapper) GetDummiesByEventID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDummiesByEventID(c, idEvent)
}

// CreateDummyUser operation middleware
func (siw *ServerInterfaceWrapper) CreateDummyUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDummyUser(c, idEvent)
}

// RemoveUserFromEvent operation middleware
func (siw *ServerInterfaceWrapper) RemoveUserFromEvent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id_user" -------------
	var idUser int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_user", c.Param("id_user"), &idUser, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_user: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveUserFromEvent(c, idEvent, idUser)
}

// GetOptimizedDebtsByUserID operation middleware
func (siw *ServerInterfaceWrapper) GetOptimizedDebtsByUserID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_event" -------------
	var idEvent int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_event", c.Param("id_event"), &idEvent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_event: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "id_user" -------------
	var idUser int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_user", c.Param("id_user"), &idUser, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_user: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOptimizedDebtsByUserID(c, idEvent, idUser)
}

// CreateCategory operation middleware
func (siw *ServerInterfaceWrapper) CreateCategory(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateCategory(c)
}

// DeleteCategory operation middleware
func (siw *ServerInterfaceWrapper) DeleteCategory(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCategory(c, id)
}

// UpdateCategory operation middleware
func (siw *ServerInterfaceWrapper) UpdateCategory(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateCategory(c, id)
}

// GetIcons operation middleware
func (siw *ServerInterfaceWrapper) GetIcons(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIcons(c)
}

// CreateIcon operation middleware
func (siw *ServerInterfaceWrapper) CreateIcon(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateIcon(c)
}

// DeleteIcon operation middleware
func (siw *ServerInterfaceWrapper) DeleteIcon(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteIcon(c, id)
}

// GetIconByID operation middleware
func (siw *ServerInterfaceWrapper) GetIconByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIconByID(c, id)
}

// UpdateIcon operation middleware
func (siw *ServerInterfaceWrapper) UpdateIcon(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateIcon(c, id)
}

// SyncUsers operation middleware
func (siw *ServerInterfaceWrapper) SyncUsers(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SyncUsers(c)
}

// GetUserByID operation middleware
func (siw *ServerInterfaceWrapper) GetUserByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id_user" -------------
	var idUser int64

	err = runtime.BindStyledParameterWithOptions("simple", "id_user", c.Param("id_user"), &idUser, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id_user: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserByID(c, idUser)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/category", wrapper.GetCategories)
	router.GET(options.BaseURL+"/api/v1/category/:id", wrapper.GetCategoryByID)
	router.GET(options.BaseURL+"/api/v1/event", wrapper.GetEvents)
	router.POST(options.BaseURL+"/api/v1/event", wrapper.CreateEvent)
	router.DELETE(options.BaseURL+"/api/v1/event/:id_event", wrapper.DeleteEvent)
	router.GET(options.BaseURL+"/api/v1/event/:id_event", wrapper.GetEventByID)
	router.PUT(options.BaseURL+"/api/v1/event/:id_event", wrapper.UpdateEvent)
	router.GET(options.BaseURL+"/api/v1/event/:id_event/activity", wrapper.GetActivitiesByEventID)
	router.POST(options.BaseURL+"/api/v1/event/:id_event/activity", wrapper.CreateActivity)
	router.DELETE(options.BaseURL+"/api/v1/event/:id_event/activity/:id_activity", wrapper.DeleteActivity)
	router.GET(options.BaseURL+"/api/v1/event/:id_event/activity/:id_activity", wrapper.GetActivityByID)
	router.PUT(options.BaseURL+"/api/v1/event/:id_event/activity/:id_activity", wrapper.UpdateActivity)
	router.GET(options.BaseURL+"/api/v1/event/:id_event/debts", wrapper.GetDebtsByEventID)
	router.GET(options.BaseURL+"/api/v1/event/:id_event/optimized-debts", wrapper.GetOptimizedDebtsByEventID)
	router.POST(options.BaseURL+"/api/v1/event/:id_event/optimized-debts", wrapper.OptimizeDebts)
	router.GET(options.BaseURL+"/api/v1/event/:id_event/task", wrapper.GetTasksByEventID)
	router.POST(options.BaseURL+"/api/v1/event/:id_event/task", wrapper.CreateTask)
	router.DELETE(options.BaseURL+"/api/v1/event/:id_event/task/:id_task", wrapper.DeleteTask)
	router.GET(options.BaseURL+"/api/v1/event/:id_event/task/:id_task", wrapper.GetTaskByID)
	router.PUT(options.BaseURL+"/api/v1/event/:id_event/task/:id_task", wrapper.UpdateTask)
	router.GET(options.BaseURL+"/api/v1/event/:id_event/transaction", wrapper.GetTransactionsByEventID)
	router.POST(options.BaseURL+"/api/v1/event/:id_event/transaction", wrapper.CreateTransaction)
	router.DELETE(options.BaseURL+"/api/v1/event/:id_event/transaction/:id_transaction", wrapper.DeleteTransaction)
	router.GET(options.BaseURL+"/api/v1/event/:id_event/transaction/:id_transaction", wrapper.GetTransactionByID)
	router.PUT(options.BaseURL+"/api/v1/event/:id_event/transaction/:id_transaction", wrapper.UpdateTransaction)
	router.GET(options.BaseURL+"/api/v1/event/:id_event/user", wrapper.GetUsersByEventID)
	router.POST(options.BaseURL+"/api/v1/event/:id_event/user", wrapper.AddUsersToEvent)
	router.GET(options.BaseURL+"/api/v1/event/:id_event/user/dummies", wrapper.GetDummiesByEventID)
	router.POST(options.BaseURL+"/api/v1/event/:id_event/user/dummy", wrapper.CreateDummyUser)
	router.DELETE(options.BaseURL+"/api/v1/event/:id_event/user/:id_user", wrapper.RemoveUserFromEvent)
	router.GET(options.BaseURL+"/api/v1/event/:id_event/user/:id_user/optimized-debts", wrapper.GetOptimizedDebtsByUserID)
	router.POST(options.BaseURL+"/api/v1/manage/category", wrapper.CreateCategory)
	router.DELETE(options.BaseURL+"/api/v1/manage/category/:id", wrapper.DeleteCategory)
	router.PUT(options.BaseURL+"/api/v1/manage/category/:id", wrapper.UpdateCategory)
	router.GET(options.BaseURL+"/api/v1/manage/icons", wrapper.GetIcons)
	router.POST(options.BaseURL+"/api/v1/manage/icons", wrapper.CreateIcon)
	router.DELETE(options.BaseURL+"/api/v1/manage/icons/:id", wrapper.DeleteIcon)
	router.GET(options.BaseURL+"/api/v1/manage/icons/:id", wrapper.GetIconByID)
	router.PUT(options.BaseURL+"/api/v1/manage/icons/:id", wrapper.UpdateIcon)
	router.POST(options.BaseURL+"/api/v1/user/sync", wrapper.SyncUsers)
	router.GET(options.BaseURL+"/api/v1/user/:id_user", wrapper.GetUserByID)
}
