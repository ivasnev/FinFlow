// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
