// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// AccessToken JWT access токен
	AccessToken string `json:"access_token"`

	// ExpiresAt Время истечения access токена
	ExpiresAt time.Time `json:"expires_at"`

	// RefreshToken Refresh токен для обновления access токена
	RefreshToken string       `json:"refresh_token"`
	User         ShortUserDTO `json:"user"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Описание ошибки
	Error string `json:"error"`
}

// LoginHistoryDTO defines model for LoginHistoryDTO.
type LoginHistoryDTO struct {
	// CreatedAt Дата и время входа
	CreatedAt time.Time `json:"created_at"`

	// Id Уникальный идентификатор записи
	Id int `json:"id"`

	// IpAddress IP адрес, с которого был выполнен вход
	IpAddress string `json:"ip_address"`

	// UserAgent User-Agent браузера/приложения
	UserAgent *string `json:"user_agent,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Login Email или nickname пользователя
	Login string `json:"login"`

	// Password Пароль пользователя
	Password string `json:"password"`
}

// LogoutRequest defines model for LogoutRequest.
type LogoutRequest struct {
	// RefreshToken Refresh токен для аннулирования
	RefreshToken string `json:"refresh_token"`
}

// RefreshTokenRequest defines model for RefreshTokenRequest.
type RefreshTokenRequest struct {
	// RefreshToken Refresh токен для обновления access токена
	RefreshToken string `json:"refresh_token"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	// Email Email пользователя
	Email openapi_types.Email `json:"email"`

	// Name Полное имя пользователя (опционально)
	Name *string `json:"name,omitempty"`

	// Nickname Уникальный никнейм пользователя
	Nickname string `json:"nickname"`

	// Password Пароль (минимум 8 символов)
	Password string `json:"password"`

	// Phone Номер телефона в международном формате (опционально)
	Phone *string `json:"phone,omitempty"`
}

// SessionDTO defines model for SessionDTO.
type SessionDTO struct {
	// CreatedAt Дата создания сессии
	CreatedAt time.Time `json:"created_at"`

	// ExpiresAt Дата истечения сессии
	ExpiresAt time.Time `json:"expires_at"`

	// Id Уникальный идентификатор сессии
	Id openapi_types.UUID `json:"id"`

	// IpAddress IP адрес, с которого была создана сессия
	IpAddress string `json:"ip_address"`
}

// ShortUserDTO defines model for ShortUserDTO.
type ShortUserDTO struct {
	// Email Email пользователя
	Email openapi_types.Email `json:"email"`

	// Id Уникальный идентификатор пользователя
	Id int64 `json:"id"`

	// Nickname Никнейм пользователя
	Nickname string `json:"nickname"`

	// Roles Роли пользователя
	Roles []string `json:"roles"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	// Email Новый email пользователя
	Email *openapi_types.Email `json:"email,omitempty"`

	// Nickname Новый nickname пользователя
	Nickname *string `json:"nickname,omitempty"`

	// Password Новый пароль (минимум 8 символов)
	Password *string `json:"password,omitempty"`
}

// UserDTO defines model for UserDTO.
type UserDTO struct {
	// CreatedAt Дата создания аккаунта
	CreatedAt time.Time `json:"created_at"`

	// Email Email пользователя
	Email openapi_types.Email `json:"email"`

	// Id Уникальный идентификатор пользователя
	Id int64 `json:"id"`

	// Nickname Никнейм пользователя
	Nickname string `json:"nickname"`

	// Roles Роли пользователя
	Roles []string `json:"roles"`

	// UpdatedAt Дата последнего обновления
	UpdatedAt time.Time `json:"updated_at"`
}

// GetLoginHistoryParams defines parameters for GetLoginHistory.
type GetLoginHistoryParams struct {
	// Limit Количество записей на странице
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Смещение для пагинации
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// LogoutJSONRequestBody defines body for Logout for application/json ContentType.
type LogoutJSONRequestBody = LogoutRequest

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody = RefreshTokenRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegisterRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest
