// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Вход в систему
	// (POST /auth/login)
	Login(c *gin.Context)
	// Выход из системы
	// (POST /auth/logout)
	Logout(c *gin.Context)
	// Получение публичного ключа
	// (GET /auth/public-key)
	GetPublicKey(c *gin.Context)
	// Обновление access токена
	// (POST /auth/refresh)
	RefreshToken(c *gin.Context)
	// Регистрация нового пользователя
	// (POST /auth/register)
	Register(c *gin.Context)
	// Получение истории входов
	// (GET /login-history)
	GetLoginHistory(c *gin.Context, params GetLoginHistoryParams)
	// Получение активных сессий пользователя
	// (GET /sessions)
	GetUserSessions(c *gin.Context)
	// Завершение сессии
	// (DELETE /sessions/{id})
	TerminateSession(c *gin.Context, id openapi_types.UUID)
	// Обновление профиля текущего пользователя
	// (PATCH /users/me)
	UpdateUser(c *gin.Context)
	// Получение пользователя по nickname
	// (GET /users/{nickname})
	GetUserByNickname(c *gin.Context, nickname string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Logout(c)
}

// GetPublicKey operation middleware
func (siw *ServerInterfaceWrapper) GetPublicKey(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPublicKey(c)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Register(c)
}

// GetLoginHistory operation middleware
func (siw *ServerInterfaceWrapper) GetLoginHistory(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLoginHistoryParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLoginHistory(c, params)
}

// GetUserSessions operation middleware
func (siw *ServerInterfaceWrapper) GetUserSessions(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserSessions(c)
}

// TerminateSession operation middleware
func (siw *ServerInterfaceWrapper) TerminateSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TerminateSession(c, id)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c)
}

// GetUserByNickname operation middleware
func (siw *ServerInterfaceWrapper) GetUserByNickname(c *gin.Context) {

	var err error

	// ------------- Path parameter "nickname" -------------
	var nickname string

	err = runtime.BindStyledParameterWithOptions("simple", "nickname", c.Param("nickname"), &nickname, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter nickname: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserByNickname(c, nickname)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/login", wrapper.Login)
	router.POST(options.BaseURL+"/auth/logout", wrapper.Logout)
	router.GET(options.BaseURL+"/auth/public-key", wrapper.GetPublicKey)
	router.POST(options.BaseURL+"/auth/refresh", wrapper.RefreshToken)
	router.POST(options.BaseURL+"/auth/register", wrapper.Register)
	router.GET(options.BaseURL+"/login-history", wrapper.GetLoginHistory)
	router.GET(options.BaseURL+"/sessions", wrapper.GetUserSessions)
	router.DELETE(options.BaseURL+"/sessions/:id", wrapper.TerminateSession)
	router.PATCH(options.BaseURL+"/users/me", wrapper.UpdateUser)
	router.GET(options.BaseURL+"/users/:nickname", wrapper.GetUserByNickname)
}
