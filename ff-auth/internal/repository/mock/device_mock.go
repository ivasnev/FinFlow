// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/device.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ivasnev/FinFlow/ff-auth/internal/models"
)

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDevice) Create(ctx context.Context, device *models.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDeviceMockRecorder) Create(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDevice)(nil).Create), ctx, device)
}

// Delete mocks base method.
func (m *MockDevice) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeviceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDevice)(nil).Delete), ctx, id)
}

// GetAllByUserID mocks base method.
func (m *MockDevice) GetAllByUserID(ctx context.Context, userID int64) ([]models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockDeviceMockRecorder) GetAllByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockDevice)(nil).GetAllByUserID), ctx, userID)
}

// GetByDeviceID mocks base method.
func (m *MockDevice) GetByDeviceID(ctx context.Context, deviceID string) (*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDeviceID", ctx, deviceID)
	ret0, _ := ret[0].(*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDeviceID indicates an expected call of GetByDeviceID.
func (mr *MockDeviceMockRecorder) GetByDeviceID(ctx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDeviceID", reflect.TypeOf((*MockDevice)(nil).GetByDeviceID), ctx, deviceID)
}

// Update mocks base method.
func (m *MockDevice) Update(ctx context.Context, device *models.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDeviceMockRecorder) Update(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDevice)(nil).Update), ctx, device)
}

// UpdateLastLogin mocks base method.
func (m *MockDevice) UpdateLastLogin(ctx context.Context, deviceID string, lastLogin time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastLogin", ctx, deviceID, lastLogin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastLogin indicates an expected call of UpdateLastLogin.
func (mr *MockDeviceMockRecorder) UpdateLastLogin(ctx, deviceID, lastLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastLogin", reflect.TypeOf((*MockDevice)(nil).UpdateLastLogin), ctx, deviceID, lastLogin)
}
