// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/key_pair.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ivasnev/FinFlow/ff-auth/internal/models"
)

// MockKeyPair is a mock of KeyPair interface.
type MockKeyPair struct {
	ctrl     *gomock.Controller
	recorder *MockKeyPairMockRecorder
}

// MockKeyPairMockRecorder is the mock recorder for MockKeyPair.
type MockKeyPairMockRecorder struct {
	mock *MockKeyPair
}

// NewMockKeyPair creates a new mock instance.
func NewMockKeyPair(ctrl *gomock.Controller) *MockKeyPair {
	mock := &MockKeyPair{ctrl: ctrl}
	mock.recorder = &MockKeyPairMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyPair) EXPECT() *MockKeyPairMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockKeyPair) Create(ctx context.Context, keyPair *models.KeyPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, keyPair)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockKeyPairMockRecorder) Create(ctx, keyPair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKeyPair)(nil).Create), ctx, keyPair)
}

// GetActive mocks base method.
func (m *MockKeyPair) GetActive(ctx context.Context) (*models.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActive", ctx)
	ret0, _ := ret[0].(*models.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActive indicates an expected call of GetActive.
func (mr *MockKeyPairMockRecorder) GetActive(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActive", reflect.TypeOf((*MockKeyPair)(nil).GetActive), ctx)
}

// GetByID mocks base method.
func (m *MockKeyPair) GetByID(ctx context.Context, id int) (*models.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockKeyPairMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockKeyPair)(nil).GetByID), ctx, id)
}

// SetActive mocks base method.
func (m *MockKeyPair) SetActive(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActive", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActive indicates an expected call of SetActive.
func (mr *MockKeyPairMockRecorder) SetActive(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActive", reflect.TypeOf((*MockKeyPair)(nil).SetActive), ctx, id)
}

// Update mocks base method.
func (m *MockKeyPair) Update(ctx context.Context, keyPair *models.KeyPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, keyPair)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockKeyPairMockRecorder) Update(ctx, keyPair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKeyPair)(nil).Update), ctx, keyPair)
}
