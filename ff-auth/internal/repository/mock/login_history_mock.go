// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/login_history.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ivasnev/FinFlow/ff-auth/internal/models"
)

// MockLoginHistory is a mock of LoginHistory interface.
type MockLoginHistory struct {
	ctrl     *gomock.Controller
	recorder *MockLoginHistoryMockRecorder
}

// MockLoginHistoryMockRecorder is the mock recorder for MockLoginHistory.
type MockLoginHistoryMockRecorder struct {
	mock *MockLoginHistory
}

// NewMockLoginHistory creates a new mock instance.
func NewMockLoginHistory(ctrl *gomock.Controller) *MockLoginHistory {
	mock := &MockLoginHistory{ctrl: ctrl}
	mock.recorder = &MockLoginHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginHistory) EXPECT() *MockLoginHistoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoginHistory) Create(ctx context.Context, history *models.LoginHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLoginHistoryMockRecorder) Create(ctx, history interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoginHistory)(nil).Create), ctx, history)
}

// GetAllByUserID mocks base method.
func (m *MockLoginHistory) GetAllByUserID(ctx context.Context, userID int64, limit, offset int) ([]models.LoginHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", ctx, userID, limit, offset)
	ret0, _ := ret[0].([]models.LoginHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockLoginHistoryMockRecorder) GetAllByUserID(ctx, userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockLoginHistory)(nil).GetAllByUserID), ctx, userID, limit, offset)
}
