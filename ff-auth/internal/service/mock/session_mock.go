// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/session.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	service "github.com/ivasnev/FinFlow/ff-auth/internal/service"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// GetUserSessions mocks base method.
func (m *MockSession) GetUserSessions(ctx context.Context, userID int64) ([]service.SessionParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSessions", ctx, userID)
	ret0, _ := ret[0].([]service.SessionParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSessions indicates an expected call of GetUserSessions.
func (mr *MockSessionMockRecorder) GetUserSessions(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSessions", reflect.TypeOf((*MockSession)(nil).GetUserSessions), ctx, userID)
}

// TerminateAllSessions mocks base method.
func (m *MockSession) TerminateAllSessions(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateAllSessions", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateAllSessions indicates an expected call of TerminateAllSessions.
func (mr *MockSessionMockRecorder) TerminateAllSessions(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateAllSessions", reflect.TypeOf((*MockSession)(nil).TerminateAllSessions), ctx, userID)
}

// TerminateSession mocks base method.
func (m *MockSession) TerminateSession(ctx context.Context, sessionID uuid.UUID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateSession", ctx, sessionID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateSession indicates an expected call of TerminateSession.
func (mr *MockSessionMockRecorder) TerminateSession(ctx, sessionID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateSession", reflect.TypeOf((*MockSession)(nil).TerminateSession), ctx, sessionID, userID)
}
