// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/device.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ivasnev/FinFlow/ff-auth/internal/models"
	service "github.com/ivasnev/FinFlow/ff-auth/internal/service"
)

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// GetOrCreateDevice mocks base method.
func (m *MockDevice) GetOrCreateDevice(ctx context.Context, deviceID, userAgent string, userID int64) (*models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateDevice", ctx, deviceID, userAgent, userID)
	ret0, _ := ret[0].(*models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateDevice indicates an expected call of GetOrCreateDevice.
func (mr *MockDeviceMockRecorder) GetOrCreateDevice(ctx, deviceID, userAgent, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateDevice", reflect.TypeOf((*MockDevice)(nil).GetOrCreateDevice), ctx, deviceID, userAgent, userID)
}

// GetUserDevices mocks base method.
func (m *MockDevice) GetUserDevices(ctx context.Context, userID int64) ([]service.DeviceParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDevices", ctx, userID)
	ret0, _ := ret[0].([]service.DeviceParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDevices indicates an expected call of GetUserDevices.
func (mr *MockDeviceMockRecorder) GetUserDevices(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDevices", reflect.TypeOf((*MockDevice)(nil).GetUserDevices), ctx, userID)
}

// RemoveDevice mocks base method.
func (m *MockDevice) RemoveDevice(ctx context.Context, deviceID int, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDevice", ctx, deviceID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDevice indicates an expected call of RemoveDevice.
func (mr *MockDeviceMockRecorder) RemoveDevice(ctx, deviceID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDevice", reflect.TypeOf((*MockDevice)(nil).RemoveDevice), ctx, deviceID, userID)
}
