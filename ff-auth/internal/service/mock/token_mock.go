// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/token.go

// Package mock is a generated GoMock package.
package mock

import (
	ed25519 "crypto/ed25519"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	service "github.com/ivasnev/FinFlow/ff-auth/internal/service"
)

// MockTokenManager is a mock of TokenManager interface.
type MockTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerMockRecorder
}

// MockTokenManagerMockRecorder is the mock recorder for MockTokenManager.
type MockTokenManagerMockRecorder struct {
	mock *MockTokenManager
}

// NewMockTokenManager creates a new mock instance.
func NewMockTokenManager(ctrl *gomock.Controller) *MockTokenManager {
	mock := &MockTokenManager{ctrl: ctrl}
	mock.recorder = &MockTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManager) EXPECT() *MockTokenManagerMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockTokenManager) GenerateToken(payload *service.TokenPayload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockTokenManagerMockRecorder) GenerateToken(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockTokenManager)(nil).GenerateToken), payload)
}

// GenerateTokenPair mocks base method.
func (m *MockTokenManager) GenerateTokenPair(userID int64, roles []string, accessTTL, refreshTTL time.Duration) (string, string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenPair", userID, roles, accessTTL, refreshTTL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GenerateTokenPair indicates an expected call of GenerateTokenPair.
func (mr *MockTokenManagerMockRecorder) GenerateTokenPair(userID, roles, accessTTL, refreshTTL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenPair", reflect.TypeOf((*MockTokenManager)(nil).GenerateTokenPair), userID, roles, accessTTL, refreshTTL)
}

// GetPublicKey mocks base method.
func (m *MockTokenManager) GetPublicKey() ed25519.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey")
	ret0, _ := ret[0].(ed25519.PublicKey)
	return ret0
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockTokenManagerMockRecorder) GetPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockTokenManager)(nil).GetPublicKey))
}

// LoadOrGenerateKeys mocks base method.
func (m *MockTokenManager) LoadOrGenerateKeys() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrGenerateKeys")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadOrGenerateKeys indicates an expected call of LoadOrGenerateKeys.
func (mr *MockTokenManagerMockRecorder) LoadOrGenerateKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrGenerateKeys", reflect.TypeOf((*MockTokenManager)(nil).LoadOrGenerateKeys))
}

// RegenerateKeys mocks base method.
func (m *MockTokenManager) RegenerateKeys() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegenerateKeys")
	ret0, _ := ret[0].(error)
	return ret0
}

// RegenerateKeys indicates an expected call of RegenerateKeys.
func (mr *MockTokenManagerMockRecorder) RegenerateKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateKeys", reflect.TypeOf((*MockTokenManager)(nil).RegenerateKeys))
}

// ValidateToken mocks base method.
func (m *MockTokenManager) ValidateToken(tokenStr string) (*service.TokenPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenStr)
	ret0, _ := ret[0].(*service.TokenPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenManagerMockRecorder) ValidateToken(tokenStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenManager)(nil).ValidateToken), tokenStr)
}
