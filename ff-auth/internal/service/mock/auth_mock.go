// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/auth.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	ed25519 "crypto/ed25519"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/ivasnev/FinFlow/ff-auth/internal/service"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// GenerateTokenPair mocks base method.
func (m *MockAuth) GenerateTokenPair(ctx context.Context, userID int64, roles []string) (string, string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenPair", ctx, userID, roles)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GenerateTokenPair indicates an expected call of GenerateTokenPair.
func (mr *MockAuthMockRecorder) GenerateTokenPair(ctx, userID, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenPair", reflect.TypeOf((*MockAuth)(nil).GenerateTokenPair), ctx, userID, roles)
}

// GetPublicKey mocks base method.
func (m *MockAuth) GetPublicKey() ed25519.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey")
	ret0, _ := ret[0].(ed25519.PublicKey)
	return ret0
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockAuthMockRecorder) GetPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockAuth)(nil).GetPublicKey))
}

// Login mocks base method.
func (m *MockAuth) Login(ctx context.Context, req service.LoginParams) (*service.AccessDataParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*service.AccessDataParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthMockRecorder) Login(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuth)(nil).Login), ctx, req)
}

// Logout mocks base method.
func (m *MockAuth) Logout(ctx context.Context, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthMockRecorder) Logout(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuth)(nil).Logout), ctx, refreshToken)
}

// RecordLogin mocks base method.
func (m *MockAuth) RecordLogin(ctx context.Context, userID int64, ipAddress, userAgent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordLogin", ctx, userID, ipAddress, userAgent)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordLogin indicates an expected call of RecordLogin.
func (mr *MockAuthMockRecorder) RecordLogin(ctx, userID, ipAddress, userAgent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLogin", reflect.TypeOf((*MockAuth)(nil).RecordLogin), ctx, userID, ipAddress, userAgent)
}

// RefreshToken mocks base method.
func (m *MockAuth) RefreshToken(ctx context.Context, refreshToken string) (*service.AccessDataParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*service.AccessDataParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthMockRecorder) RefreshToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuth)(nil).RefreshToken), ctx, refreshToken)
}

// Register mocks base method.
func (m *MockAuth) Register(ctx context.Context, req service.RegisterParams) (*service.AccessDataParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req)
	ret0, _ := ret[0].(*service.AccessDataParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthMockRecorder) Register(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuth)(nil).Register), ctx, req)
}

// ValidateToken mocks base method.
func (m *MockAuth) ValidateToken(token string) (int64, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthMockRecorder) ValidateToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuth)(nil).ValidateToken), token)
}
